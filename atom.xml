<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vv13</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.vv13.cn/"/>
  <updated>2018-02-05T17:35:19.881Z</updated>
  <id>http://blog.vv13.cn/</id>
  
  <author>
    <name>vv13</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端适配</title>
    <link href="http://blog.vv13.cn/2018/02/06/css_adapt/"/>
    <id>http://blog.vv13.cn/2018/02/06/css_adapt/</id>
    <published>2018-02-05T16:50:00.000Z</published>
    <updated>2018-02-05T17:35:19.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h3><p>屏幕尺寸即屏幕对角线之间的距离，单位为英寸(inch)。单位换算如下：</p>
<ul>
<li>1 inch = 2.54 cm</li>
<li>1 cm = 0.3937inch</li>
</ul>
<h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>分辨率大致分为两种：</p>
<ol>
<li>屏幕分辨率，例如屏幕分辨率为1920 x 1080，代表着设备屏幕水平方向有1024个像素点，垂直方向有1080个像素点，显示屏固定的情况下，分辨率越高画面越精细。</li>
<li>图像分辨率，通常情况下，图像的分辨率越高，所包含的像素就越多，图像就越清晰，印刷的质量也就越好。同时，它也会增加文件占用的存储空间。</li>
</ol>
<h3 id="页面尺寸单位"><a href="#页面尺寸单位" class="headerlink" title="页面尺寸单位"></a>页面尺寸单位</h3><p>相对单位：</p>
<ul>
<li><strong>px</strong>，通常代表一个设备像素点的显示，对于打印机和高分辨率屏幕，一个css像素意味着多个设备像素。</li>
<li><strong>%</strong>，相对于目前容器元素宽度的百分比。</li>
</ul>
<ul>
<li><strong>em</strong>，相对于父及单位的font-size取值，如果容器font-size为18px，此时1em=18px。在使用em时需要尤其注意，em单位会具有继承效果，继承于离它最近元素的font-size，如出现em嵌套使用，那么将会很难对其进行管理，em通常用于某独立的组件的响应设计上，不要嵌套不相关的元素在里面使用。</li>
<li><strong>rem</strong>，相对于根html的font-size取值，如果页面具有：<code>html{font-size:20px;}</code>，此时<code>1rem=20px</code>。</li>
<li><strong>ex</strong>，表示字体的x-height，通常为字体尺寸的1/2，1ex≈0.5em。</li>
<li><strong>无单位</strong>，当设置单位为0时可以不指定具体单位，行高也可以不设置单位。</li>
</ul>
<p>绝对单位(多用于印刷)：</p>
<ul>
<li><strong>cm/mm/in</strong>，即厘米/毫米/英寸。</li>
<li><strong>pt</strong>，磅(1/72英寸)。</li>
<li><strong>pc</strong>，12点活体字。</li>
</ul>
<p>视口单位：</p>
<ul>
<li><strong>vw/vh</strong>，分别相对于视口宽度的1/100和视口高度的1/100。</li>
<li><strong>vmin/vmax</strong>，视口高度和宽度之间的最小值的1/100。</li>
<li><strong>vmax</strong>，视口高度和宽度之间的最大值得1/100。</li>
</ul>
<h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><p>像素(pixel)是组成图像的最小显示单位，它是一个抽象的单位，而不是具体的长度，在Web开发中通常将像素分为两类：</p>
<ol>
<li><strong>设备像素</strong>，指设备的物理像素，任何设备屏幕的物理像素的数量都是不变的。</li>
<li><strong>CSS像素</strong>，指设备的逻辑像素，也称为独立像素，是一个相对的单位大小。1个CSS像素在不同设备上对应不同的物理像素数，这个比值称为DPR(Device Pixel Ration，设备像素比)。</li>
</ol>
<p>以Phone 5为例，它的设备像素为640/1136px，设备像素比为2，因此CSS像素为320/568px。设计师通常根据固定的设备像素进行设计，前端工程师再根据不同设备的特性，将物理像素转换为相应的逻辑像素。</p>
<h3 id="设备像素比"><a href="#设备像素比" class="headerlink" title="设备像素比"></a>设备像素比</h3><p>设备像素比缩写为DPR(Device Pixel Ratio)或者DPPX(Dots Per Pixel)，一般用于表示一个CSS像素等于几个物理像素：<code>DPR=物理像素/逻辑像素</code>。当dpr为2时，1个CSS像素由4个物理像素组成，可通过<code>window.devicePixelRatio</code>获取当前设备的dpr。</p>
<h3 id="像素密度"><a href="#像素密度" class="headerlink" title="像素密度"></a>像素密度</h3><p>像素密度也叫做屏幕密度，缩写为DPI(dots Per Inch)或PPI(Pixels Per Inch)。以iphone X举例，设备的参数如下：</p>
<ul>
<li>水平分辨率：2436px</li>
<li>垂直分辨率：1125px</li>
<li>屏幕对角线尺寸：5.8英寸</li>
</ul>
<p>为了计算像素密度，我们通常需要求出屏幕对角线的分辨率，再除以屏幕对角线尺寸。根据勾股定理(直角三角形的两条直角边的长度的平方和等于斜边长的平方)，得以下表达式：<br><img src="http://7xp5r4.com1.z0.glb.clouddn.com/18-2-6/69150988.jpg" alt=""></p>
<p>tricks：</p>
<ul>
<li>DPI与PPI其实指代的东西是不同的，需要注意语境，人们多为混用。</li>
<li>根据实验，普通人眼在一般阅读距离的极限就是300~400DPI，所以说目前的高清屏的DPI也在300左右。</li>
<li>普通的非彩色喷墨式打印机通常设定在300dpi，根据公式：<code>像素=英寸 x dpi</code>，可以通过调整图像像素大小，获取所需要的实际尺寸大小。</li>
</ul>
<h3 id="寸照究竟有多少像素？"><a href="#寸照究竟有多少像素？" class="headerlink" title="寸照究竟有多少像素？"></a>寸照究竟有多少像素？</h3><p>通过搜索，<code>1寸=2.5cm x 3.5cm=413 x 295</code>，聪明的你肯定不需要过多的说明，看以下换算公式：<br><img src="http://7xp5r4.com1.z0.glb.clouddn.com/18-2-6/99937072.jpg" alt=""></p>
<h2 id="viewport-视口"><a href="#viewport-视口" class="headerlink" title="viewport(视口)"></a>viewport(视口)</h2><p>viewport概念通常存在于移动端，因为pc端的视口大小与窗口相等，而在移动设备的浏览器中，一般视口的默认大小会比设备逻辑的独立像素要大，并可拖过手动缩放来浏览网页，这个窗口就称之为viewport，普通设备浏览器的默认viewport通常为980px或1024px，随之的副作用就是设备的横向滚动条。</p>
<h3 id="布局视口"><a href="#布局视口" class="headerlink" title="布局视口"></a>布局视口</h3><p>手机浏览器默认会去适应那些不是为移动端设计的网站，因此会为viewport设置一个默认值，一般为980px，这样大部分电脑端页面都能正常显示了，只是比例看起来很小，因此布局视口通常是大于浏览器可视区域，不进行缩放的情况也会有额外的额外滚动条，这个宽度可以通过<code>document.documentElement.clientWidth</code>来进行获取，它跟设备的大小没有关系。</p>
<h3 id="视觉视口"><a href="#视觉视口" class="headerlink" title="视觉视口"></a>视觉视口</h3><p>用户默认看到的网站区域，即为视觉视口大小，放大会使视觉视口大小变小，因为整个屏幕显示的CSS像素更少了，而缩小会使其变大，缩放不会影响布局视口大小。</p>
<h3 id="理想视口"><a href="#理想视口" class="headerlink" title="理想视口"></a>理想视口</h3><p>布局视口并不是一个理想宽度，对设备而言，设备宽度即是理想视口宽度，通常可见viewport的一个属性：<code>width=device-width</code>，这一行代码告诉浏览器将视口大小设置为理想视口大小。</p>
<h3 id="viewport标签"><a href="#viewport标签" class="headerlink" title="viewport标签"></a>viewport标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div></pre></td></tr></table></figure>
<p>viewport标签专为移动端的设备而设计，以上是一个最常用的标签，它可以设置以下几个特性：</p>
<ul>
<li>width：viewport的宽度大小，如640，也可设置如device-width使其等于设备的宽度</li>
<li>height：viewport的高度</li>
<li>initial-scale：初始缩放比例</li>
<li>maximum-scale：允许用户缩放的最大比例</li>
<li>minimum-scale：允许用户缩放的最小比例</li>
<li>user-scalable：是否允许手动缩放</li>
</ul>
<h3 id="视口单位"><a href="#视口单位" class="headerlink" title="视口单位"></a>视口单位</h3><ul>
<li>vw，1vw等于视口宽度的1%</li>
<li>vh：1vh等于视口高度的1%</li>
<li>vmin：选取vw和vh中更小的一个</li>
<li>vmax：选取vw和vh中更大的一个</li>
</ul>
<p>视口单位与<strong>%</strong>很像，但一个依赖于视口大小，一个依赖于元素的父级，既然在此提出来了，那么视口单位有哪些作用呢？没错，主要是用于适配的。</p>
<p>在实际的项目中，通过将vw作为宽度，可以获取较适合的屏幕比例，高度不推荐使用，除非是设计师已经设计好了元素的比例，此时才应该使用vw单位作为宽度，在项目中通过任意一个预处理器的函数可将设计图上的像素计算为px，以下是我的stylus函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$mobile-screen = 640</div><div class="line">px2vw(px, device = $mobile-screen)</div><div class="line">  (px / device * 100)vw</div><div class="line">  </div><div class="line">px2vw(320) // 输出为50vw</div></pre></td></tr></table></figure>
<h2 id="适配解决方案"><a href="#适配解决方案" class="headerlink" title="适配解决方案"></a>适配解决方案</h2><h3 id="手机调试"><a href="#手机调试" class="headerlink" title="手机调试"></a>手机调试</h3><p><strong>首选方案</strong>，即启动开发服务器的时候，将端口设置为0.0.0.0，然后连接同一网段的ip进行访问。若需要真机调试的话，若没有服务器的话，可以使用ngrok进行代理，有服务器推荐使用frp，当然，做微信相关的开发，请使用微信开发者工具。</p>
<h3 id="REM的font-size设置为多少合适？"><a href="#REM的font-size设置为多少合适？" class="headerlink" title="REM的font-size设置为多少合适？"></a>REM的font-size设置为多少合适？</h3><p>常用浏览器的默认html的字体大小是16px，网上最流行将其设置为<code>font-size: 10px</code>或者是<code>font-size: 62.5%</code>，大家在使用rem前需要知道以下两点：</p>
<ol>
<li>以rem设置font-size，最小只能给元素设置为12px，若html的font-size为10px，那么给元素赋值<code>font-size: 1rem</code>，它的实际大小为10px。</li>
<li>以rem设置width/height，最小也只能接受12px以上的font-size值，若元素宽为2rem，对应font-size为10px时，它的实际大小为24px。</li>
</ol>
<p>因此非常不建议设置为12px以下，这样会造成<strong>计算不精准</strong>；也不建议设置如100px的大小，若忘记给元素设置font-size，<strong>默认值会影响整个页面</strong>的美观；因此建议设置范围在<strong>12-20</strong>之间。</p>
<h3 id="100-与100vw有什么区别？"><a href="#100-与100vw有什么区别？" class="headerlink" title="100%与100vw有什么区别？"></a>100%与100vw有什么区别？</h3><p>100vw是基于viewport的尺寸，会填满viewport，而100%占据全部可获得的空间。</p>
<p>需要注意的是，vw会忽略滚动条所占据的宽度，假如在有纵向滚动条的情况下，将元素宽度设置为100vw，那么横向就会出现一个很小的滚动条，在这种情况下应该使用100%。具体原因是因为当html和body的overflow:auto时滚动条不会从视口中减去，而overflow:scroll时视口就会减去滚动条占据的空间，也不会出现滚动条了。</p>
<h3 id="retina屏下border为1px的问题"><a href="#retina屏下border为1px的问题" class="headerlink" title="retina屏下border为1px的问题"></a>retina屏下border为1px的问题</h3><p>当在dpr为2的高清设计图看到border为1px时，其实设计师需要的是1个物理像素，转化为CSS像素就是0.5px，那么如何解决呢？在此简单总结为以下方法：</p>
<p>一、通过JavaScript检测浏览器的dpr，从而给html添加一个类名，再到需要处理的样式的地方写一套权重更高的样式表。但是这样的解决方法并不兼容部分老设备，但我相信随着时间的推移，兼容性的问题也会大大减少吧。</p>
<p>二、动态设置viewport标签，假设机型为phone5时，可设置为如下viewport，这样页面中所有border:1px都将缩小为0.5：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=640,initial-scale=0.5,maximum-scale=0.5, minimum-scale=0.5,user-scalable=no&quot;&gt;</div></pre></td></tr></table></figure>
<p>在实际使用时请参考某网站的JavaScript动态计算dpr、rem、viewport的方式。</p>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p><a href="https://www.sven.de/dpi/" target="_blank" rel="external">移动设备分辨率与DPI集合</a></p>
<p><a href="http://dpi.lv/" target="_blank" rel="external">设备dpi/dpr</a></p>
<p><a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="external">ngrok</a>，调试工具</p>
<p><a href="https://github.com/fatedier/frp" target="_blank" rel="external">frp</a>，调试工具</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.cnblogs.com/lyzg/p/4877277.html" target="_blank" rel="external">从网易与淘宝的font-size思考前端设计稿与工作流 - 流云诸葛 - 博客园</a></p>
<p><a href="https://www.w3cplus.com/css/viewports.html" target="_blank" rel="external">viewports剖析</a></p>
<p><a href="https://webdesign.tutsplus.com/zh-hans/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984" target="_blank" rel="external">综合指南: 何时使用 Em 与 Rem</a></p>
<p><a href="http://www.ayqy.net/blog/%E5%AE%8C%E5%85%A8%E7%90%86%E8%A7%A3px-dpr-dpi-dip/" target="_blank" rel="external">完全理解px-dpr-dpi-dip</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;屏幕尺寸&quot;&gt;&lt;a href=&quot;#屏幕尺寸&quot; class=&quot;headerlink&quot; title=&quot;屏幕尺寸&quot;&gt;&lt;/a&gt;屏幕尺寸&lt;/h3&gt;&lt;p&gt;屏幕尺寸即屏幕对角线之间的距离，单位为英寸(inch)。单位换算如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 inch = 2.54 cm&lt;/li&gt;
&lt;li&gt;1 cm = 0.3937inch&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分辨率&quot;&gt;&lt;a href=&quot;#分辨率&quot; class=&quot;headerlink&quot; title=&quot;分辨率&quot;&gt;&lt;/a&gt;分辨率&lt;/h3&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://blog.vv13.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>d3-intro</title>
    <link href="http://blog.vv13.cn/2017/10/24/d3-intro/"/>
    <id>http://blog.vv13.cn/2017/10/24/d3-intro/</id>
    <published>2017-10-24T14:13:18.000Z</published>
    <updated>2017-10-24T14:13:37.634Z</updated>
    
    <content type="html"><![CDATA[<p>D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。</p>
<p>D3允许将数据绑定到DOM中，然后基于数据驱动去变化DOM。例如可以用数字数组来生成html的表格，或者使用相同数据创建一个平滑响应的SVG条形图。</p>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>使用W3C DOM API十分繁琐，因此D3使用selections，一种声明式的方式来随意的操纵节点。</p>
<p>例如原dom有操作方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var paragraphs = document.getElementsByTagName(&quot;p&quot;);</div><div class="line">for (var i = 0; i &lt; paragraphs.length; i++) &#123;</div><div class="line">  var paragraph = paragraphs.item(i);</div><div class="line">  paragraph.style.setProperty(&quot;color&quot;, &quot;white&quot;, null);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用d3的方式来重写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d3.selectAll(&quot;p&quot;).style(&quot;color&quot;, &quot;white&quot;);</div><div class="line">d3.select(&quot;body&quot;).style(&quot;background-color&quot;, &quot;black&quot;)</div></pre></td></tr></table></figure>
<p>打开调试的页面，即可看到效果。d3的选择器也是由标准<a href="https://www.w3.org/TR/selectors-api/" target="_blank" rel="external">W3C Selectors API</a>构建的，因此在各种现代浏览器中原生支持。d3提供了丰富的方法来改变节点：设置属性、样式、注册事件、删除添加节点等，这些可以满足大多的需要。</p>
<h2 id="动态特性"><a href="#动态特性" class="headerlink" title="动态特性"></a>动态特性</h2><p>d3就像dom的框架jquery一样，包含有许多属性、样式的函数方法，它不仅仅简化了方法，组合起来会惊人的强大。d3还提供了许多内建可复用的函数，如区域图形、线和饼图。</p>
<p>例如，使偶数段落颜色值随机：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d3.selectAll(&apos;p&apos;).style(&apos;color&apos;, function (d, i) &#123;</div><div class="line">  return i % 2 ? &apos;#fff&apos; : &apos;hsl(&apos; + Math.random() * 360 + &apos;,100%,50%)&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>计算属性通常用于绑定数据，数据规定为一个数组，每个元素都会通过第一个参数由默认顺序传递进入选择器函数，例如我们可以使用一个数组去动态设置字体大小：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d3.selectAll(&quot;p&quot;)</div><div class="line">  .data([4, 8, 15, 16, 23, 42])</div><div class="line">    .style(&quot;font-size&quot;, function(d) &#123; return d + &quot;px&quot;; &#125;);</div></pre></td></tr></table></figure>
<p>一旦数据被绑定到dom，那么在之后的操作中可以不用再一次绑定数据，d3将会检测先前绑定的数据，因此允许重新计算属性而不用重新绑定。                                                                                                                                                                                                                                                                                                                                    </p>
<h2 id="Enter-和-Exit"><a href="#Enter-和-Exit" class="headerlink" title="Enter 和 Exit"></a>Enter 和 Exit</h2><p>Enter可用于为新来的数据创建新的节点，当数据绑定到了选择器上时，每个结点都会有对应的数据，如果节点少于数据，那么<strong>额外的数据就会从enter选择器进入</strong>，在这里面就可以进行添加等操作，而Exitremove用于。</p>
<p>如果没有使用Enter和Exit，会自动的选择存在存在并且匹配数据的节点进行更新操作，而exit用于退出节点，remove用于删除节点。</p>
<p>D3让你基于数据对dom进行变化，这些操作包括了添加与删除，也允许改变响应事件、动画事件或是从第三方库异步通知，甚至支持混合的方式，从服务器上渲染，然后更新到客户端上。</p>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>D3不会引入新的视觉表现，而是直接来源于Web标准：HTML、SVG和CSS。因此无需考虑兼容性问题，因为所有D3使用的技术都是浏览器内置的元素与标准。</p>
<p>D3专注于从自然到动画的转化，随着时间逐渐插入样式和属性，中间过程可以使用如“elastic”, “cubic-in-out” 和“linear”来控制补片。</p>
<p>通过仅修改实际改变的属性，D3减少了开销，并允许在高帧速率下实现更大的图形复杂度。D3还允许通过事件对复杂过渡进行排序。而且，您仍然可以使用CSS3转换; D3不会取代浏览器的工具箱，而是以更容易使用的方式展开。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// css</div><div class="line">.chart div &#123;</div><div class="line">  font: 10px sans-serif;</div><div class="line">  background-color: steelblue;</div><div class="line">  text-align: right;</div><div class="line">  padding: 3px;</div><div class="line">  margin: 1px;</div><div class="line">  color: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// html</div><div class="line">&lt;div class=&quot;chart&quot;&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">// js</div><div class="line">d3.select(&quot;.chart&quot;)</div><div class="line">  .selectAll(&quot;div&quot;)</div><div class="line">  .data([30, 86, 168, 281, 303, 365])</div><div class="line">    .enter()</div><div class="line">    .append(&quot;div&quot;)</div><div class="line">    .style(&quot;width&quot;, function(d) &#123; return d * 2 + &quot;px&quot;; &#125;)</div><div class="line">    .text(function(d) &#123; return &apos;$ &apos; + d; &#125;);</div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://7xp5r4.com1.z0.glb.clouddn.com/17-10-24/89023358.jpg" alt=""></p>
<p>其中，api方法如下：</p>
<ul>
<li>select，选中某一个元素</li>
<li>selectAll，选中其中的div元素</li>
<li>data，传入数据</li>
<li>enter，对于额外数据进行插入操作</li>
<li>append，插入div</li>
<li>style，设置宽度，回调函数d代表data对应的值</li>
<li>text，修改插入元素内的文字</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。&lt;/p&gt;
&lt;p&gt;D3允许将数据绑定到DOM中，然后基于数据驱动去变化DOM。例如可以用数字数组来生成html的表格，或者使用相同数据创建一个平滑响应的SVG条形图。&lt;/p&gt;
&lt;h2 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h2&gt;&lt;p&gt;使用W3C DOM API十分繁琐，因此D3使用selections，一种声明式的方式来随意的操纵节点。&lt;/p&gt;
&lt;p&gt;例如原dom有操作方式如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://blog.vv13.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>css的BFC特性</title>
    <link href="http://blog.vv13.cn/2017/10/23/bfc-intro/"/>
    <id>http://blog.vv13.cn/2017/10/23/bfc-intro/</id>
    <published>2017-10-23T15:29:05.000Z</published>
    <updated>2017-10-23T15:30:15.887Z</updated>
    
    <content type="html"><![CDATA[<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p><strong>毗邻元素</strong></p>
<p>只要两个容器之间没有被非空内容、padding、border或clear隔开，那么就可以称作毗邻元素，父组件相对于其第一个子元素或最后一个子元素，只要没有相隔任何上述条件，也可称之为毗邻元素</p>
<p><strong>普通流(normal flow)</strong></p>
<p>在普通流中，元素按照其在HTML中的先后顺序至上而下布局，这个过程中，行内元素水平排列，直到当行被占满后换行，块级元素则会被渲染为一个新行，除非另外指定，否则所有元素默认都是普通流定位。</p>
<p>以下情况会脱离文档流而存在，分别是：<code>float: left</code>、<code>position: absolute</code>、<code>position: fixed</code></p>
<h3 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h3><p>Block Formatting Context，块格式化上下文，拥有一套渲染规则来决定子元素将如何布局，以及和其他子元素的相互关系。</p>
<p>BFC可通过如下条件形成：</p>
<ul>
<li>浮动元素、绝对定位元素</li>
<li>非块级盒子的块级容器(inline-blocks、table-cells、table-captions)</li>
<li>overflow不为默认值visible</li>
</ul>
<p>BFC的特性如下：</p>
<ul>
<li>内部的Box会在垂直方向，从顶部开始一个接一个地放置</li>
<li>Box垂直方向的距离由margin决定，属于同一个BFC的两个相邻Box会发生叠加</li>
<li>在BFC中，每一个Box的左外边缘，会触碰到容器的左边缘，右边也依然，即使存在浮动也如此</li>
<li>形成了BFC的区域不会与float box重叠</li>
<li>它是一个隔离的容器，容器内的子元素不会影响到外面的元素</li>
<li>计算BFC的高度时，浮动元素也参与计算</li>
</ul>
<p>利用BFC的特性，我们可以用来解决诸如以下等问题。</p>
<h3 id="消除外边距塌陷-margin-collapsing"><a href="#消除外边距塌陷-margin-collapsing" class="headerlink" title="消除外边距塌陷(margin collapsing)"></a>消除外边距塌陷(margin collapsing)</h3><p>在同一个BFC中，两个或多个毗邻的普通流中的块元素垂直方向上的margin会发生叠加，相邻块的外边距有时会被合并为单个外边距，取其中更大的值，这种行为称为外边距塌陷，发生此情况有一下几种情况：</p>
<p><strong>1. 相邻的兄弟姐妹元素</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p style=&quot;margin-bottom: 30px;&quot;&gt;这个段落的下外边距被合并...&lt;/p&gt;</div><div class="line">&lt;p style=&quot;margin-top: 20px;&quot;&gt;...这个段落的上外边距被合并。&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>此时p的距离为30px，而不是预想的50px，在布局时需要注意。</p>
<p><strong>2. 父子元素</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;parent&quot; style=&quot;margin-top: 20px;&quot;&gt;</div><div class="line">  &lt;p class=&quot;child&quot; style=&quot;margin-top: 10px;&quot;&gt;p的margin会被父元素的margin合并&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>产生这种影响必须满足两个条件：</p>
<ol>
<li>第一个子元素的上边距和父元素的上边距会进行合并</li>
<li>最后一个子元素的下边距会和父元素的下边距进行合并</li>
</ol>
<p>当父元素的margin-top为0时，而子元素不为0，则整个区域都会具有子元素的外边距，这种情况称之为<strong>子元素劫持</strong>。给父元素设置<code>overflow: hidden</code>或是其他，触发了BFC特性即可解决。</p>
<p><strong>3. 空元素</strong></p>
<p>它的上下边距会自动合并为一个外边距，这作为外边距塌陷的一种特殊情况。</p>
<h3 id="解决父元素塌陷"><a href="#解决父元素塌陷" class="headerlink" title="解决父元素塌陷"></a>解决父元素塌陷</h3><p>父元素塌陷指的是当子元素全为float，父元素高度为0这种情况，因为float元素不占据文档流(normal flow)空间，所以产生了塌陷，只需触发父元素的BFC特性即可解决，BFC会根据子元素的情况自动适应高度，包含浮动的子元素。</p>
<h3 id="解决元素被浮动元素覆盖"><a href="#解决元素被浮动元素覆盖" class="headerlink" title="解决元素被浮动元素覆盖"></a>解决元素被浮动元素覆盖</h3><p>浮动元素的毗邻节点会无视浮动的元素，尽量占满一行，这样就会被浮动元素所覆盖到，因此只需要把非浮动元素触发BFC，则会形成两列布局，从而不会被浮动元素覆盖。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;毗邻元素&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要两个容器之间没有被非空内容、padding、border或clear隔开，那么就可以称作毗邻元素，父组件相对于其第一个子元素或最后一个子元素，只要没有相隔任何上述条件，也可称之为毗邻元素&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;普通流(normal flow)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在普通流中，元素按照其在HTML中的先后顺序至上而下布局，这个过程中，行内元素水平排列，直到当行被占满后换行，块级元素则会被渲染为一个新行，除非另外指定，否则所有元素默认都是普通流定位。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://blog.vv13.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>jenkins部署</title>
    <link href="http://blog.vv13.cn/2017/10/18/jenkins-deploy/"/>
    <id>http://blog.vv13.cn/2017/10/18/jenkins-deploy/</id>
    <published>2017-10-18T15:59:52.000Z</published>
    <updated>2017-10-18T16:00:52.984Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins是一种由Java开发的持续集成工具，称为CI(Continuous integration)，主要功能是将代码频繁地集成到主干，可以让代码快的迭代，并提高代码质量。</p>
<p>典型的工作流为：开发→提交→编译→测试→发布，Jenkins可以帮你完成除了开发之后的工作，实现自动化。</p>
<h2 id="Jenkins部署步骤"><a href="#Jenkins部署步骤" class="headerlink" title="Jenkins部署步骤"></a>Jenkins部署步骤</h2><p>准备工作如下：</p>
<ol>
<li>服务器安装docker</li>
<li>拉取镜像：<code>docker pull jenkins/jenkins</code></li>
<li>创建一个文件夹<code>jenkins_home</code>用于存放jenkins所有配置文件，挂载出来方便迁移，遇到权限问题可设置：<code>chown 1000 ./jenkins_home</code></li>
</ol>
<p>做完以上流程，即可执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d --name jenkins_node -p 8899:8080 -v /var/jenkins_home:/var/jenkins_home jenkins/jenkins</div></pre></td></tr></table></figure>
<p>其中，参数如下定义：</p>
<ul>
<li>-d，docker进程在后台运行</li>
<li>-name，docker容器名称</li>
<li>-p，映射docker端口8080为本地端口8899，通过<code>localhost:8899</code>即可访问</li>
<li>-v，将服务器的<code>/var/jenkins_home</code>挂载到docker容器的<code>/var/jenkins_home</code></li>
</ul>
<p>以上步骤都执行成功后，访问<code>server_ip/8899</code>可以看到如下页面：</p>
<p><img src="http://7xp5r4.com1.z0.glb.clouddn.com/17-10-18/84127408.jpg" alt=""></p>
<p>此时查询到container ID， 然后通过<code>docker logs id</code>可以查询到密钥就在log中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">INFO:</div><div class="line"></div><div class="line">*************************************************************</div><div class="line">*************************************************************</div><div class="line">*************************************************************</div><div class="line"></div><div class="line">Jenkins initial setup is required. An admin user has been created and a password generated.</div><div class="line">Please use the following password to proceed to installation:</div><div class="line"></div><div class="line">密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥密钥</div><div class="line"></div><div class="line">This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</div><div class="line"></div><div class="line">*************************************************************</div><div class="line">*************************************************************</div><div class="line">*************************************************************</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins是一种由Java开发的持续集成工具，称为CI(Continuous integration)，主要功能是将代码频繁地集成到主干，可以让代码快的迭代，并提高代码质量。&lt;/p&gt;
&lt;p&gt;典型的工作流为：开发→提交→编译→测试→发布，Jenkins可以帮你完成除了开发之后的工作，实现自动化。&lt;/p&gt;
&lt;h2 id=&quot;Jenkins部署步骤&quot;&gt;&lt;a href=&quot;#Jenkins部署步骤&quot; class=&quot;headerlink&quot; title=&quot;Jenkins部署步骤&quot;&gt;&lt;/a&gt;Jenkins部署步骤&lt;/h2&gt;&lt;p&gt;准备工作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器安装docker&lt;/li&gt;
&lt;li&gt;拉取镜像：&lt;code&gt;docker pull jenkins/jenkins&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建一个文件夹&lt;code&gt;jenkins_home&lt;/code&gt;用于存放jenkins所有配置文件，挂载出来方便迁移，遇到权限问题可设置：&lt;code&gt;chown 1000 ./jenkins_home&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js事件触发机制</title>
    <link href="http://blog.vv13.cn/2017/10/17/js-event-trigger/"/>
    <id>http://blog.vv13.cn/2017/10/17/js-event-trigger/</id>
    <published>2017-10-17T15:27:11.000Z</published>
    <updated>2018-01-07T10:59:53.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>事件捕获</strong></p>
<p>由网景最先提出，事件会从最外层开始发生，直到最具体的元素，也就是说假如父元素与子元素都绑定有点击事件，又互相重叠，那么先出发的会是父元素的事件，然后再传递到子元素。</p>
<p><strong>事件冒泡</strong></p>
<p>由微软提出，事件会从最内从的元素开始发生，再向外传播，正好与事件捕获相反。</p>
<p>这两个概念都是为了解决页面中事件流的发生顺序，w3c采取了折中的办法，制定了统一的标准：先捕获再冒泡。</p>
<hr>
<p><img src="http://7xp5r4.com1.z0.glb.clouddn.com/17-10-17/68340524.jpg" alt=""></p>
<p><code>addEventListen(event, function, useCapture)</code>添加事件的第三个参数默认值为false，即默认使用事件冒泡，若为true则使用事件捕获的机制，以下为测试代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">container.addEventListener(&apos;click&apos;, () =&gt; console.log(&apos;container&apos;), true)</div><div class="line">child.addEventListener(&apos;click&apos;, () =&gt; console.log(&apos;child&apos;), true)</div><div class="line">// 点击child, 输出: container，child</div><div class="line"></div><div class="line">container.addEventListener(&apos;click&apos;, () =&gt; console.log(&apos;container&apos;))</div><div class="line">child.addEventListener(&apos;click&apos;, () =&gt; console.log(&apos;child&apos;))</div><div class="line">// 点击child, 输出: child，container</div></pre></td></tr></table></figure>
<p>假若还是在两个div中，希望点击子元素时不触发父元素的点击事件，我们就需要用到<strong>阻止冒泡</strong>的方式：<code>stopPropagation</code>，改写child的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">child.addEventListener(&apos;click&apos;, e =&gt; &#123;</div><div class="line">  console.log(&apos;child&apos;)</div><div class="line">  e.stopPropagation()</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>说起了stopPropagation，还有一种方式为preventDefault，它的作用不是用于阻止冒泡，而是<strong>阻止浏览器默认行为</strong>，如a标签跳转，submit提交等。</p>
<p>还有一种方式称为<strong>事件委托</strong>，利用冒泡的机制，子元素的点击事件可由父元素委托执行，举个例子，还是如上视图，子元素点击事件删除以后，对父元素做以下定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">container.addEventListener(&quot;click&quot;, e =&gt; &#123;</div><div class="line">  if (e.target.id === &apos;child&apos;) &#123;</div><div class="line">    console.log(&apos;child&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>可见，当点击子元素依然会输出<code>child</code>，在某些特定场景利用事件委托可节省大量的性能。</p>
<p>明白了上述事件关系，target与currentTarget也就易于理解了，简言之，<strong>target指引发出发事件的元素，currentTarget则指事件绑定的元素</strong>，如通过点击子元素出发父元素，那么父元素中event对象的target为子元素，而currentTarget为它本身。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>在这里有必要谈谈鼠标事件，大家可能知道但不记得的常用鼠标事件有以下四种：</p>
<ul>
<li>mouseenter：鼠标进入时触发，不响应子元素冒泡事件</li>
<li>mouseover：鼠标进入时触发，响应子元素冒泡事件</li>
<li>mouseleave：鼠标离开时触发，不响应子元素冒泡事件</li>
<li>mouseout：鼠标离开时触发，响应子元素冒泡事件</li>
</ul>
<p>让我们举一个实际场景来说明关于冒泡的应该(偷懒不附上详细代码了)：</p>
<p><img src="http://7xp5r4.com1.z0.glb.clouddn.com/17-10-19/36934899.jpg" alt=""></p>
<p>场景如下：</p>
<ul>
<li>鼠标移入每一行，显示编辑按钮，移出则取消</li>
<li>点击编辑按钮后，显示输入框，直到点击确定才回到之前的状态</li>
</ul>
<p>其实这个场景看起来简单，不明白事件机制就容易遇到很多坑，毕竟是用原生js写，而不是jquery的解决方案，接下来我来说一下我实现此场景的步骤。</p>
<p>单看页面，其实就是ul&gt;li结构，此场景的条数可能有上千条，我最先考虑到的也是hover机制，但是css hover并不能解决问题，因为点击编辑以后，就不受hover态影响了，因此该编辑与输入框的显示应该由两个元素变量来判断：<code>&lt;div class=&quot;schedule-input-wrap&quot; v-show=&quot;isEdit || hovering&quot;&gt;</code>，也就是说，hover过后hovering为true，点击编辑以后isEdit为true，点击确定以后并移开鼠标此元素才会隐藏。</p>
<p>有了思路，首先考虑<strong>事件捕获机制</strong>，也就是说，我只需要在ul上监听一个mouseover事件，然后通过target.id来判断鼠标移入的是哪个li就行了，但实际情况会比这个复杂，因为子元素也会触发mouseover事件，它会产生冒泡，这样一来，就不能单纯的实现li的hover效果，那怎么办呢？css中有个效果为<code>pointer-events:none;</code>，当我给子元素设置好此属性，结果真的就不冒泡了，能正常显示了，但是这样一来，子元素不仅不会响应mouseover事件，连click事件也不会显示了，因此果断排除掉。</p>
<p>后来的解决方法是在li上添加mouseenter事件，而在ul元素上加mouseleave事件，这样一来，hover态的变量控制就十分完美了，部分代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;ul @mouseleave=&quot;hoverId=&apos;&apos;&quot;&gt;</div><div class="line">    &lt;li v-for=&quot;(item, itemIndex) in record.schedulings&quot;</div><div class="line">        @mouseenter=&quot;hoverId=`item$&#123;itemIndex&#125;`&quot;</div><div class="line">        ....</div><div class="line">        &lt;schedule-input :hovering=&quot;isHovering(itemIndex)&quot;</div><div class="line">        &gt;&lt;/schedule-input&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<p>其中，hovering的prop用于判定hoverId是否等于当前li的itemIndex。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;事件捕获&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由网景最先提出，事件会从最外层开始发生，直到最具体的元素，也就是说假如父元素与子元素都绑定有点击事件，又互相重叠，那么先出发的会是父元素的事件，然后再传递到子元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事件冒泡&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由微软提出，事件会从最内从的元素开始发生，再向外传播，正好与事件捕获相反。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.vv13.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>什么是函数节流</title>
    <link href="http://blog.vv13.cn/2017/10/14/throttle/"/>
    <id>http://blog.vv13.cn/2017/10/14/throttle/</id>
    <published>2017-10-14T09:28:24.000Z</published>
    <updated>2017-10-14T09:30:28.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是函数节流"><a href="#什么是函数节流" class="headerlink" title="什么是函数节流"></a>什么是函数节流</h2><p>避免同一时间函数调用多次，消耗大量的性能，比如resize事件、input事件等，通过设定函数执行时间间隔与延时，来达到优化的效果，应用最多的如lodash的debounce防抖函数了吧。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先通过setTimeout实现一个简单的版本，原理为使用clearTimeout刷新定时器即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function throttle(fn, delay, ...args) &#123;</div><div class="line">  let timer = null</div><div class="line">  return function() &#123;</div><div class="line">  	clearTimeout(timer)</div><div class="line">  	timer = setTimeout(() =&gt; fn.apply(this, args), delay)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const log = throttle(console.log, 300, 1)</div><div class="line">for (let i = 0; i &lt; 100; i++) &#123;</div><div class="line">  log() // 只会打印一次</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的函数有时还无法完成要求，比如在拖拽一个元素时，直接使用此节流函数会造成拖拽的时候无法移动，等拖完了就直接闪到终点去了，因为函数一直在定时器内不断刷新，只有到最后才执行了，因此需要对此函数改进一下，多设定一个参数，即触发的时间间隔，这样即可保证函数的执行频率了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function throttle(fn, delay, duration, ...args) &#123;</div><div class="line">  let timer = null</div><div class="line">  let tStart</div><div class="line">  return function() &#123;</div><div class="line">  	clearTimeout(timer)</div><div class="line">  	const cStart = +Date()</div><div class="line">  	if (!tStart) &#123;</div><div class="line">      tStart = cStart</div><div class="line">  	&#125;</div><div class="line">  	if (cStart - tStart &gt;= duration) &#123;</div><div class="line">      fn.apply(this, args)</div><div class="line">      tStart = cStart</div><div class="line">  	&#125; else &#123;</div><div class="line">      timer = setTimeout(() =&gt; &#123;</div><div class="line">      	fn.apply(this, args);</div><div class="line">      &#125;, delay)</div><div class="line">  	&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.alloyteam.com/2012/11/javascript-throttle/" target="_blank" rel="external">浅谈javascript的函数节流</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是函数节流&quot;&gt;&lt;a href=&quot;#什么是函数节流&quot; class=&quot;headerlink&quot; title=&quot;什么是函数节流&quot;&gt;&lt;/a&gt;什么是函数节流&lt;/h2&gt;&lt;p&gt;避免同一时间函数调用多次，消耗大量的性能，比如resize事件、input事件等，通过设定函数执行时间间隔与延时，来达到优化的效果，应用最多的如lodash的debounce防抖函数了吧。&lt;/p&gt;
&lt;h2 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h2&gt;&lt;p&gt;首先通过setTimeout实现一个简单的版本，原理为使用clearTimeout刷新定时器即可：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function throttle(fn, delay, ...args) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  let timer = null&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return function() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	clearTimeout(timer)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	timer = setTimeout(() =&amp;gt; fn.apply(this, args), delay)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.vv13.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>简历中的STAR原则</title>
    <link href="http://blog.vv13.cn/2017/10/08/%E7%AE%80%E5%8E%86%E4%B8%AD%E7%9A%84STAR%E5%8E%9F%E5%88%99/"/>
    <id>http://blog.vv13.cn/2017/10/08/简历中的STAR原则/</id>
    <published>2017-10-08T13:53:25.000Z</published>
    <updated>2017-10-09T05:14:12.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="STAR概念"><a href="#STAR概念" class="headerlink" title="STAR概念"></a>STAR概念</h2><ul>
<li>Situation：事情是在什么情况下发生的</li>
<li>Task：主要的任务目标是什么</li>
<li>Action：朝向目标的具体行动方式</li>
<li>Result：结果如何，有哪些成长</li>
</ul>
<p>Star法则主要用于叙述一件事情，不仅可以用于描述简历中的项目经理，当给别人讲述一件事情时，遵从STAR法则也能让故事线更加清晰，因为他是一种表现力强的逻辑方式，能让阐述一件事情更具有：清晰性、条理性和逻辑性。</p>
<h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h2><p>举一个示例：获得省比赛跨栏季军。</p>
<p>S：省比赛一共有三十个四川省本科院校，其中B组参赛有12个院校，我处于B组。</p>
<p>T：获取前三名，为学院争光。</p>
<p>A：在学校每周都会进行两次跨栏训练。</p>
<p>R：获得四川省110跨栏比赛季军，并受到学院表彰。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>明确目标，保持专注，大步向前。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;STAR概念&quot;&gt;&lt;a href=&quot;#STAR概念&quot; class=&quot;headerlink&quot; title=&quot;STAR概念&quot;&gt;&lt;/a&gt;STAR概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Situation：事情是在什么情况下发生的&lt;/li&gt;
&lt;li&gt;Task：主要的任务目标是什么&lt;/li&gt;
&lt;li&gt;Action：朝向目标的具体行动方式&lt;/li&gt;
&lt;li&gt;Result：结果如何，有哪些成长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Star法则主要用于叙述一件事情，不仅可以用于描述简历中的项目经理，当给别人讲述一件事情时，遵从STAR法则也能让故事线更加清晰，因为他是一种表现力强的逻辑方式，能让阐述一件事情更具有：清晰性、条理性和逻辑性。&lt;/p&gt;
&lt;h2 id=&quot;Example-1&quot;&gt;&lt;a href=&quot;#Example-1&quot; class=&quot;headerlink&quot; title=&quot;Example 1&quot;&gt;&lt;/a&gt;Example 1&lt;/h2&gt;&lt;p&gt;举一个示例：获得省比赛跨栏季军。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tricks" scheme="http://blog.vv13.cn/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>异步编程中的thunk函数</title>
    <link href="http://blog.vv13.cn/2017/08/23/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84thunk%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.vv13.cn/2017/08/23/异步编程中的thunk函数/</id>
    <published>2017-08-22T17:16:14.000Z</published>
    <updated>2017-10-08T13:57:45.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Thunk"><a href="#什么是Thunk" class="headerlink" title="什么是Thunk"></a>什么是Thunk</h2><p>Thunk英译即转化程序，第一次遇见这个名词是在使用redux-thunk的时候，只知道是做为异步和同步中间件来使用，并未深入的了解，接下来发现koa的框架中是因在koa1的概念中设计到了它，故学习了一番，因此做一个简单的总结。</p>
<p>写一个简单的函数，用于读取package.json的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.readFile(&apos;package.json&apos;, (err, data) =&gt; &#123;</div><div class="line">    if (err) throw err;</div><div class="line">    console.log(data.toString())</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在某些情况下，我们需要将参数进行包装一下，比如在koa1的生成器中间件中，我们必须将函数包装成有且只有一个callback函数，这样koa中间件才能识别函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">const app = new Koa()</div><div class="line"></div><div class="line">app.use(function*(next) &#123;</div><div class="line">    const data = yield readFileThunk(&apos;package.json&apos;)</div><div class="line">    console.log(data)</div><div class="line">    yield next</div><div class="line">&#125;)</div><div class="line"></div><div class="line">function readFileThunk(path, cb) &#123;</div><div class="line">    return function(cb) &#123;</div><div class="line">        fs.readFile(path, (err, data) =&gt; &#123;</div><div class="line">            if (err) throw err</div><div class="line">            cb(null, data.toString())</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">app.listen(3000)</div></pre></td></tr></table></figure>
<p>通过访问端口，我们看到了正确的打印信息，将正常函数包装为上述函数，即称之为thunk函数。<strong>Thunk函数将多参数函数替换成了单参数版本</strong>，与高阶函数、柯里化思想类似。播个小插曲，在koa2中，中间件写法更迭成了async/await，其原理也是基于generator进行又一次封装，代码为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.use(async(ctx, next) =&gt; &#123;</div><div class="line">    const data = await readFileWrap(&apos;package.json&apos;)</div><div class="line">    console.log(data)</div><div class="line">    await next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">function readFileWrap(path, cb) &#123;</div><div class="line">    return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">        fs.readFile(path, (err, data) =&gt; &#123;</div><div class="line">            if (err) throw reject(error)</div><div class="line">            resolve(data.toString())</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们接下来自己实现一个简易的thunk工具方法，思路如下：</p>
<ol>
<li>一共三个执行函数，第一层函数传入主函数方法fn，并返回一个带有fn方法的闭包</li>
<li>第二层函数传入参数args，然后返回一个仅需传入回调函数供外部执行的方法</li>
<li>第三层函数传入一个回调函数cb, 然后执行主程序</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function thunkit(fn) &#123;</div><div class="line">    return function() &#123;</div><div class="line">        var args = Array.prototype.slice.call(arguments) </div><div class="line">        return function(cb) &#123;</div><div class="line">            args.push(cb)</div><div class="line">            return fn.apply(this, args)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在实际使用中，往往业务场景更复杂，因此推荐使用node-thunkify库，源代码也只有28行，请看下一节。</p>
<h2 id="thunkify源码解析"><a href="#thunkify源码解析" class="headerlink" title="thunkify源码解析"></a>thunkify源码解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">function thunkify(fn)&#123;</div><div class="line">  assert(&apos;function&apos; == typeof fn, &apos;function required&apos;); // 是否为函数</div><div class="line"></div><div class="line">  return function()&#123;</div><div class="line">    var args = new Array(arguments.length); </div><div class="line">    var ctx = this; // 绑定函数的上下文对象</div><div class="line">	</div><div class="line">	// 初始化了一个新的数组，这种写法兼容性更强，不像本文上面直接用的.slice方法进行拷贝数组</div><div class="line">    for(var i = 0; i &lt; args.length; ++i) &#123;</div><div class="line">      args[i] = arguments[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return function(done)&#123;</div><div class="line">      var called; // 记录是否执行回调，只允许执行一次</div><div class="line"></div><div class="line">      args.push(function()&#123;</div><div class="line">        if (called) return;</div><div class="line">        called = true;</div><div class="line">        done.apply(null, arguments);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      try &#123;</div><div class="line">        fn.apply(ctx, args); // 调用参数列表</div><div class="line">      &#125; catch (err) &#123;</div><div class="line">        done(err); // 返回错误</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>源代码已经够简单了，想也无需多说明，<strong>重要的是函数本身的思想与灵活的去运用</strong>。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><a href="https://github.com/tj/node-thunkify" target="_blank" rel="external">node-thunkify</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html" target="_blank" rel="external">阮一峰-Thunk 函数的含义和用法</a></p>
</li>
<li><p><a href="http://blog.stevensanderson.com/2013/12/21/experiments-with-koa-and-javascript-generators/" target="_blank" rel="external">experiments-with-koa-and-javascript-generators</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Thunk&quot;&gt;&lt;a href=&quot;#什么是Thunk&quot; class=&quot;headerlink&quot; title=&quot;什么是Thunk&quot;&gt;&lt;/a&gt;什么是Thunk&lt;/h2&gt;&lt;p&gt;Thunk英译即转化程序，第一次遇见这个名词是在使用redux-thunk的时候，只知道是做为异步和同步中间件来使用，并未深入的了解，接下来发现koa的框架中是因在koa1的概念中设计到了它，故学习了一番，因此做一个简单的总结。&lt;/p&gt;
&lt;p&gt;写一个简单的函数，用于读取package.json的信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fs.readFile(&amp;apos;package.json&amp;apos;, (err, data) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (err) throw err;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(data.toString())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在某些情况下，我们需要将参数进行包装一下，比如在koa1的生成器中间件中，我们必须将函数包装成有且只有一个callback函数，这样koa中间件才能识别函数：&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.vv13.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue中如何自定义v-model</title>
    <link href="http://blog.vv13.cn/2017/03/31/vue%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89v-model/"/>
    <id>http://blog.vv13.cn/2017/03/31/vue中如何自定义v-model/</id>
    <published>2017-03-30T17:36:00.000Z</published>
    <updated>2017-10-08T13:57:52.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在vue的表单中，大家都享受着v-model带来的便利性，有时候也会遇到自定义v-model的场景，其实它是一颗语法糖而已，那我们接下来就来吃糖吧。</p>
<p>基本的v-model用法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input v-model=&quot;something&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>其实它是以下用法的简写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input :value=&quot;something&quot; @input=&quot;something = $event.target.value&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>因此，自己封装组件的话，可以这样来定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// demo.vue</div><div class="line">&lt;template lang=&quot;html&quot;&gt;</div><div class="line">  &lt;input :value=&quot;value&quot; @input=&quot;valueChange&quot;&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  props: [&apos;value&apos;],</div><div class="line">  methods: &#123;</div><div class="line">    valueChange (v) &#123;</div><div class="line">      this.$emit(&apos;input&apos;, v.target.value)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">// 引用</div><div class="line">&lt;demo v-model=&quot;something&quot;&gt;&lt;/demo&gt;</div></pre></td></tr></table></figure>
<h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><p>在使用element组件库中，有些组件需要借助拆分v-model自定义命令才能实现需要的功能，如下:</p>
<p><img src="http://i4.buimg.com/567571/4be2a48163ab3278.png" alt=""></p>
<p>我们想要展示的数据格式为：</p>
<p><img src="http://i2.muimg.com/567571/22498a7d7df1a596.png" alt=""></p>
<p>仔细查阅接口文档，并没有我们需要的格式化数据方法，只有一个format =&gt; YYMMDD的类似方法，但是看示例代码它实现了v-model的双向绑定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;el-time-select</div><div class="line">  v-model=&quot;value1&quot;</div><div class="line">&lt;/el-time-select&gt;</div></pre></td></tr></table></figure></p>
<p>因此，我们可以通过@input事件获取到它的改变值，然后再通过:value展示时添加一个过滤器，将字符串转换以下即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;el-time-select</div><div class="line">  :value=&quot;time | convertToRangeTime&quot;</div><div class="line">  @input=&quot;e =&gt; time = e&quot;</div><div class="line">&lt;/el-time-select&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在vue的表单中，大家都享受着v-model带来的便利性，有时候也会遇到自定义v-model的场景，其实它是一颗语法糖而已，那我们接下来就来吃糖吧。&lt;/p&gt;
&lt;p&gt;基本的v-model用法为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;input v-model=&amp;quot;something&amp;quot;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实它是以下用法的简写：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;input :value=&amp;quot;something&amp;quot; @input=&amp;quot;something = $event.target.value&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，自己封装组件的话，可以这样来定义：&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://blog.vv13.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>理解javascript线程</title>
    <link href="http://blog.vv13.cn/2017/02/09/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3javascript%E7%BA%BF%E7%A8%8B/"/>
    <id>http://blog.vv13.cn/2017/02/09/深入理解javascript线程/</id>
    <published>2017-02-09T09:30:24.000Z</published>
    <updated>2017-10-08T13:57:57.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul>
<li>进程：系统资源分配与组织的最小单位，具备独立功能的程序即可成为一个进程，它有自己的内存空间</li>
<li>线程：cpu调度和分派(运行)的最小单位，线程是一个进程的实体，可以共享进程独占的资源，自己只拥有一点在运行中必不可少的资源(程序计数器、寄存器、栈)</li>
</ul>
<p>线程的作用：</p>
<ol>
<li>大多数程序需要多个线程同步或互斥的并行完成工作，将工作分化到线程中简化了编程模型</li>
<li>线程很轻量，创建与销毁消耗的资源小</li>
<li>线程提高了cpu利用率，避免了如等待用户输入、异步资源请求等一系列阻塞操作</li>
</ol>
<p>根据以上概念，多核cpu可以同时运行多个线程，那可以运行多个进程吗？普遍的答案是cpu只能同时运行一个线程，它是靠时间片轮转来实现的伪多进程，以下有一个关于利用多核心cpu的一个解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">最早 UNIX 的调度是以 “进程” 为最小调度单位，那个时候还没有线程的概念。线程有两种，一种是 “用户态线程” ，对内核不可见，内核不可以调度，现在一般叫做纤程或协程。另一种是 “内核态线程”，由内核调度，也称作轻量进程 LWP 。现在说的线程，一般不特殊指定，都是内核线程。</div><div class="line"></div><div class="line">能不能利用多核的关键是能不能被内核调度，既然内核态线程可以被调度，自然可以利用多核。</div><div class="line"></div><div class="line">另外只要资源足够（内存） CPU 可以 hold 住任意多的进程或线程，这与 CPU 的核数无关。你在这里指的应该是 “运行” 。</div></pre></td></tr></table></figure>
<h2 id="javascript单线程机制"><a href="#javascript单线程机制" class="headerlink" title="javascript单线程机制"></a>javascript单线程机制</h2><p>javascipt语言最大的特点就是单线程，同一时间只有一段代码在执行，这种语言有一个共同的特点：基于事件驱动。它虽然是单线程的，但是所在的平台肯定是异构的：</p>
<ol>
<li>在浏览器中，界面渲染线程负责渲染、浏览器事件处理器、异步请求线程等，他们会配合javascript实现各种异步操作。</li>
<li>再node种，libuv库负责node api的执行，它将不同的任务分配给不同的线程，形成一个event loop，以异步的方式将任务的执行结果返回给V8引擎。</li>
</ol>
<p>所以说，javascript执行是单线程的，方法是异步的，应用是多线程的。</p>
<h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>javascript核心为单线程机制，所有任务执行都需要按照顺序进行排队，如果前一个任务耗时长，后一个任务就需要等待，因此那些耗时较长的任务就被javascript的作者设计成了异步任务，任务队列正是存放异步任务的地方。</p>
<p>同步任务指在主线程中执行的任务栈，它会形成一个执行栈，像堆积木一样存放，实现层层调用，若有一个任务失败，则整个程序就会失败。异步任务就放到了任务队列里，等到异步任务成功响应(io输入读取完成、异步请求等待到服务器的响应)，任务队列会通知主线程执行预先设定好的回调函数。</p>
<p>任务队列还有时间的概念，通过定时器setTimeout()和setInterval()这两个函数就可以在任务队列中规定多少事件后执行，它们调用后会返回定时器id,通过clearTimeout与clearInterval可以取消。</p>
<p>关于定时器的用法，常见的如<code>setTimeout(fn, 0);</code>，需要注意的是它不会立即执行，而是需要等到主进行这一次所有同步任务执行结束后，才会去读取任务队列的通知，执行相应的定时器方法。</p>
<h2 id="事件循环-Event-Loop"><a href="#事件循环-Event-Loop" class="headerlink" title="事件循环(Event Loop)"></a>事件循环(Event Loop)</h2><p><img src="http://i4.buimg.com/567571/eadf3db4bf455904.png" alt="image"><br>Event Loop是一个程序结构，用于等待和发送消息事件，它是javascript单线程的重要处理机制，简单说就是将其他线程的资源取回主线程，执行事先设定的回调函数。</p>
<p>主线程会不断的从消息队列中读取事件，这个过程是不断循环的，因此称之为事件循环，事件循环经常用以下方式实现:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (queue.waitForMessage()) &#123;</div><div class="line">    queue.processNextMessage()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而消息队列是一个先进先出的队列，当有异步操作完成或事件点击产生时，回调函数会作为消息进入到消息队列，等待主线程的读取与执行。</p>
<h2 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h2><p>随着页面越来越复杂，html5制定了新的标准，而web worker的到来就是为浏览器端提供了多线程的编程能力，允许主线程将一些高计算或高延迟的工作分配给子线程。</p>
<p>Web Worker所执行的代码是在另一个作用域中，与当前代码不共享作用域，也无法访问dom，而且在父子线程中通讯时，传值是被序列化后复制到Worker中的，而不是直接引用传递，这样足以避免子线程影响父线程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进程和线程&quot;&gt;&lt;a href=&quot;#进程和线程&quot; class=&quot;headerlink&quot; title=&quot;进程和线程&quot;&gt;&lt;/a&gt;进程和线程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进程：系统资源分配与组织的最小单位，具备独立功能的程序即可成为一个进程，它有自己的内存空间&lt;/li&gt;
&lt;li&gt;线程：cpu调度和分派(运行)的最小单位，线程是一个进程的实体，可以共享进程独占的资源，自己只拥有一点在运行中必不可少的资源(程序计数器、寄存器、栈)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程的作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大多数程序需要多个线程同步或互斥的并行完成工作，将工作分化到线程中简化了编程模型&lt;/li&gt;
&lt;li&gt;线程很轻量，创建与销毁消耗的资源小&lt;/li&gt;
&lt;li&gt;线程提高了cpu利用率，避免了如等待用户输入、异步资源请求等一系列阻塞操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据以上概念，多核cpu可以同时运行多个线程，那可以运行多个进程吗？普遍的答案是cpu只能同时运行一个线程，它是靠时间片轮转来实现的伪多进程，以下有一个关于利用多核心cpu的一个解释：&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.vv13.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://blog.vv13.cn/2017/01/21/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://blog.vv13.cn/2017/01/21/flex布局/</id>
    <published>2017-01-21T11:50:00.000Z</published>
    <updated>2018-02-03T14:47:44.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>flex即弹性盒子布局，它比传统的布局提供更大的灵活性，w3c组织在09年提出这个概念，目前已经广泛应用于支持各个浏览器。</p>
<p>它最大的特性是可以使子元素充分的利用容器的空间，当空间不足时也可进行收缩，以此来适应各种各样的屏幕大小，也能根据权重排列子元素的顺序。</p>
<p>设置容器为flex布局，只需要设置<code>display: flex</code>即可。它将具有以下特性：</p>
<ol>
<li>子元素float、clear、vertical-align将失效。</li>
<li>存在主轴(默认为水平)与交叉轴，通过flex-direction可设置主轴的方向。</li>
</ol>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="/static/imgs/flex布局.png" alt=""></p>
<h4 id="轴线"><a href="#轴线" class="headerlink" title="轴线"></a>轴线</h4><ul>
<li>主轴: 它是flex子元素的排列方向，默认为水平向右，可根据flex-direction确定方向。</li>
<li>交叉轴：垂直于主轴,确定子元素的垂直方向上的位置。</li>
</ul>
<h4 id="flex-属性："><a href="#flex-属性：" class="headerlink" title="flex 属性："></a>flex 属性：</h4><ul>
<li>flex-direction，设置主轴的方向</li>
<li>flex-wrap，项目是否多行显示</li>
<li>flex-flow，flex-direction与flex-wrap的缩写，默认为row nowrap</li>
<li>justify-content，项目在主轴上的对齐方式</li>
<li>align-items，项目在交叉轴上的对齐方式</li>
<li>align-content，多根轴线的对其方式，对只有一根轴线的无效</li>
</ul>
<h4 id="flex-item属性："><a href="#flex-item属性：" class="headerlink" title="flex item属性："></a>flex item属性：</h4><ul>
<li>order，项目的权重，数值越小排列越靠前</li>
<li>flex-grow，项目的放大比例，默认为0不放大</li>
<li>flex-shrink，项目的缩小比例，默认为1等比缩小，设置为0后不缩小</li>
<li>flex-basis，项目本身的大小，和width、height类似</li>
<li>flex，flex-grow、flex-shrink和flex-basis属性的简写</li>
<li>align-self，设置项目自身的对其方式，覆盖align-items属性</li>
</ul>
<p>各项详细配置，请参照阮老师的<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">语法文章</a>。</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><blockquote>
<p><a href="http://vv13.cn/flex-demo" target="_blank" rel="external">vv13.cn/flex-demo</a></p>
</blockquote>
<p>文字不便描述，直接访问在线app示例吧，这里是<a href="https://github.com/vv13/flex-demo.git" target="_blank" rel="external">github地址</a>～</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;flex即弹性盒子布局，它比传统的布局提供更大的灵活性，w3c组织在09年提出这个概念，目前已经广泛应用于支持各个浏览器。&lt;/p&gt;
&lt;p&gt;它最大的特性是可以使子元素充分的利用容器的空间，当空间不足时也可进行收缩，以此来适应各种各样的屏幕大小，也能根据权重排列子元素的顺序。&lt;/p&gt;
&lt;p&gt;设置容器为flex布局，只需要设置&lt;code&gt;display: flex&lt;/code&gt;即可。它将具有以下特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;子元素float、clear、vertical-align将失效。&lt;/li&gt;
&lt;li&gt;存在主轴(默认为水平)与交叉轴，通过flex-direction可设置主轴的方向。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://blog.vv13.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BEM规范</title>
    <link href="http://blog.vv13.cn/2017/01/09/BEM%E8%A7%84%E8%8C%83/"/>
    <id>http://blog.vv13.cn/2017/01/09/BEM规范/</id>
    <published>2017-01-09T14:27:27.000Z</published>
    <updated>2017-10-08T13:58:08.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是BEM？"><a href="#什么是BEM？" class="headerlink" title="什么是BEM？"></a>什么是BEM？</h2><p>block(块)、element(元素)、modifier(修饰符)，是一种css命名方式，它让css类对开发者更加透明与易于维护。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.block &#123;&#125; // 块</div><div class="line">.block__element &#123;&#125; // 块所属元素</div><div class="line">.block__element--modifier &#123;&#125; // 块所属元素的状态</div></pre></td></tr></table></figure>
<h2 id="与sass结合"><a href="#与sass结合" class="headerlink" title="与sass结合"></a>与sass结合</h2><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>通过&amp;会直接引用父元素，嵌套使用&amp;可以增强可读性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.block &#123;</div><div class="line">  &amp;__element1 &#123;&#125;</div><div class="line">  &amp;__element2 &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h3><p>如下html：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li class=&quot;nav__item&quot;&gt;&lt;/li&gt;</div><div class="line">  &lt;li class=&quot;nav__item&quot;&gt;&lt;/li&gt;</div><div class="line">  &lt;li class=&quot;nav__item--active&quot;&gt;&lt;/li&gt; &lt;!-- 梦想 --&gt;</div><div class="line">  &lt;li class=&quot;nav__item nav__item--active&quot;&gt;&lt;/li&gt; &lt;!-- 现实 --&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<p>extend可以继承类的所有定义，于是可以这样消除冗余：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.nav &#123;</div><div class="line">  ...</div><div class="line">  &amp;__item &#123;</div><div class="line">    ...</div><div class="line">    &amp;--active &#123;</div><div class="line">      @extend .nav__item;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="css-module…"><a href="#css-module…" class="headerlink" title="css module…"></a>css module…</h2><p>css module确实能给react带来很好的css独立性，再也不用担心产生命名冲突，但通过实际编程，发现以下问题：</p>
<h3 id="书写麻烦"><a href="#书写麻烦" class="headerlink" title="书写麻烦"></a>书写麻烦</h3><p>使用css module引入的标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div className=&#123;classnames(style[&apos;class1__child&apos;], style[&apos;class2&apos;]&#125;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>而使用import导入bem类会是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div className=&quot;class1__child class2&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>写过react测试的同学应该深有体会吧，运行测试时无法通过类名直接去选择，这样会绕了多少弯路啊～</p>
<h3 id="编译工具"><a href="#编译工具" class="headerlink" title="编译工具"></a>编译工具</h3><p>sass、less我是不想舍弃～</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol>
<li>BEM的优点</li>
<li>补充说明</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是BEM？&quot;&gt;&lt;a href=&quot;#什么是BEM？&quot; class=&quot;headerlink&quot; title=&quot;什么是BEM？&quot;&gt;&lt;/a&gt;什么是BEM？&lt;/h2&gt;&lt;p&gt;block(块)、element(元素)、modifier(修饰符)，是一种css命名方式，它让css类对开发者更加透明与易于维护。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.block &amp;#123;&amp;#125; // 块&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.block__element &amp;#123;&amp;#125; // 块所属元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.block__element--modifier &amp;#123;&amp;#125; // 块所属元素的状态&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;与sass结合&quot;&gt;&lt;a href=&quot;#与sass结合&quot; class=&quot;headerlink&quot; title=&quot;与sass结合&quot;&gt;&lt;/a&gt;与sass结合&lt;/h2&gt;
    
    </summary>
    
    
      <category term="tricks" scheme="http://blog.vv13.cn/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>几个简单的排序-js描述</title>
    <link href="http://blog.vv13.cn/2016/12/26/%E5%86%92%E6%B3%A1%E3%80%81%E9%80%89%E6%8B%A9%E4%B8%8E%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.vv13.cn/2016/12/26/冒泡、选择与插入排序/</id>
    <published>2016-12-26T07:02:51.000Z</published>
    <updated>2018-02-03T14:47:44.265Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法的精髓就在于：不用会忘，看一遍就能懂。 所以记录一下还是很有必要的。</p>
<h2 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h2><p>冒泡排序（Bubble Sort），是一种较简单的排序算法，较稳定，用途广，时间复杂度为O(n^2)。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="/static/imgs/冒泡、选择与插入排序-1.jpg" alt=""></p>
<p>此示例一共进行了4次循环，每次确认一个最大的索引值。每进行一次循环时，从索引0开始往下进行比较，若索引0大于索引1则互相交换位置，否则不进行交换，然后接着往下进行比较，保证索引位置始终大于之前找到的数。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function sort(arrs) &#123;</div><div class="line">  const len = arrs.length;</div><div class="line">  for (let i = 0; i &lt; len - 1; i++) &#123;</div><div class="line">    for (let j = 0; j &lt; len - 1 - i; j++) &#123;</div><div class="line">      if ( arrs[j] &gt; arrs[j + 1]) &#123;</div><div class="line">        [arrs[j], arrs[j + 1]] = [arrs[j + 1], arrs[j]];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输入：3,6,9,4,2</div><div class="line">输出：2,3,4,6,9</div><div class="line">耗时：18ms</div></pre></td></tr></table></figure>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序也很简单，大家懂冒泡就理解，它是冒泡排序的一种改进方法，他们都是每次循环找出一个最大或最小的数，区别在于冒泡排序会进行很多次交换数据，而选择排序用一个变量来暂存值，每趟循环只进行一次交换。</p>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p><img src="/static/imgs/冒泡、选择与插入排序-2.jpg" alt="选择排序"></p>
<p>如图所示，每次循环找出最大值，与最小索引进行交换，这样就实现了从大到小的排序。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function sort(arrs) &#123;</div><div class="line">  const len = arrs.length;</div><div class="line">  let index;</div><div class="line">  for (let i = 0; i &lt; len - 1; i++) &#123;</div><div class="line">    index = i;</div><div class="line">    for (let j = i; j &lt; len; j++) &#123;</div><div class="line">      if (arrs[index] &lt; arrs[j]) &#123;</div><div class="line">        index = j;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    if (i !== index) &#123;</div><div class="line">      [arrs[i], arrs[index]] = [arrs[index], arrs[i]];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输入：3,6,9,4,2</div><div class="line">输出：9,6,4,3,2</div><div class="line">耗时：18ms</div></pre></td></tr></table></figure>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入排序即将一个数插入到一个已经有序的数字序列中，是一个稳定的排序方法，平均情况稍微比选择排序快。</p>
<h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p><img src="/static/imgs/冒泡、选择与插入排序-3.jpg" alt=""></p>
<p>想想一下你手中有4张手牌2、4、5、10，当你抽到1张7后，与10进行比较，比10小，往右挪10，与5进行比较，7&gt;5，因此将牌放于次空隙中。而插入排序就是手牌从2张到任意张手牌进行此抽排方式的过程的抽象。</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function sort(arrs) &#123;</div><div class="line">  const len = arrs.length;</div><div class="line">  for (let i = 1; i &lt; len; i++) &#123;</div><div class="line">    let j = i - 1;</div><div class="line">    const index = arrs[i];</div><div class="line">    while (j &gt;= 0 &amp;&amp; arrs[j] &gt; index) &#123;</div><div class="line">      arrs[j + 1] = arrs[j--];</div><div class="line">    &#125;</div><div class="line">    arrs[j + 1] = index;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输入：3,6,9,4,2</div><div class="line">输出：2,3,4,6,9</div><div class="line">耗时：18ms</div></pre></td></tr></table></figure>
<h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><p>快速排序是在实际中最常用的一种排序算法，速度快，效率高。就像名字一样，快速排序是最优秀的一种排序算法。它采用了分治法的思想，整个排序过程递归进行。</p>
<h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><ol>
<li>选取数组中最左边的数作为基准。</li>
<li>分区过程，将比这个数大的放到它的右边，小于它的数放到它的左边。</li>
<li>对左右区间重复第二步，直到各区间只有一个数。</li>
</ol>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function sort(arrs, left, right) &#123;</div><div class="line">  if (left &gt; right) return;</div><div class="line">  const len = arrs.length;</div><div class="line">  const key = arrs[left];</div><div class="line">  let low = left;</div><div class="line">  let high = right;</div><div class="line">  while (low &lt; high) &#123;</div><div class="line">    while (low &lt; high &amp;&amp; arrs[high] &gt; key) &#123;</div><div class="line">      high--;</div><div class="line">    &#125;</div><div class="line">    arrs[low] = arrs[high];</div><div class="line">    while (low &lt; high &amp;&amp; arrs[low] &lt; key) &#123;</div><div class="line">      low++;</div><div class="line">    &#125;</div><div class="line">    arrs[high] = arrs[low];</div><div class="line">  &#125;</div><div class="line">  arrs[low] = key;</div><div class="line">  sort(arrs, left, low - 1);</div><div class="line">  sort(arrs, low + 1, right);</div><div class="line">&#125;</div><div class="line"></div><div class="line">输入：[3,6,9,4,2],0,4</div><div class="line">输出：[2,3,4,6,9],0,4</div><div class="line">耗时：15ms</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序算法的精髓就在于：不用会忘，看一遍就能懂。 所以记录一下还是很有必要的。&lt;/p&gt;
&lt;h2 id=&quot;冒泡&quot;&gt;&lt;a href=&quot;#冒泡&quot; class=&quot;headerlink&quot; title=&quot;冒泡&quot;&gt;&lt;/a&gt;冒泡&lt;/h2&gt;&lt;p&gt;冒泡排序（Bubble Sort），是一种较简单的排序算法，较稳定，用途广，时间复杂度为O(n^2)。&lt;/p&gt;
&lt;h4 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/static/imgs/冒泡、选择与插入排序-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.vv13.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>python求质数的几种方法</title>
    <link href="http://blog.vv13.cn/2016/12/26/%E6%B1%82%E8%B4%A8%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.vv13.cn/2016/12/26/求质数的几种方法/</id>
    <published>2016-12-25T16:02:23.000Z</published>
    <updated>2017-10-08T13:58:14.261Z</updated>
    
    <content type="html"><![CDATA[<p>今天偶然在博客上上看到有人提<a href="http://blog.csdn.net/program_think/article/details/7032600/" target="_blank" rel="external">求质素的几种境界</a>,在此用python进行实现代码,并进行简单的说明.</p>
<p>我们将要实现函数的功能是输入一个数N,能把小于N的质数个数打印出来,并计算出所耗时间.</p>
<h3 id="境界1"><a href="#境界1" class="headerlink" title="境界1"></a>境界1</h3><p>我们采用试除法,意思就是将比N小的符合要求的每一个数都除以它,若都无法整除则N为质数,这也是我们能想到的最简单的方法,我们可以从j的范围进行优化一下,很容易想到j的范围可以取<code>2~N/2</code>.<br>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">def f1(num):</div><div class="line">    # 2也是质数,之后程序从3开始判断</div><div class="line">    count = 1</div><div class="line">    for i in range(3, num):</div><div class="line">        b = True</div><div class="line">        for j in range(2, i/2 + 1):</div><div class="line">            if i % j == 0:</div><div class="line">                b = False</div><div class="line">                break</div><div class="line">        if b:</div><div class="line">            count += 1</div><div class="line">    return count</div><div class="line"></div><div class="line">f1(100000)</div><div class="line"># 耗时35.1589805796秒, 个数9592</div></pre></td></tr></table></figure>
<h3 id="境界2"><a href="#境界2" class="headerlink" title="境界2"></a>境界2</h3><p>我们可以从j的范围再进行优化一下,最优的范围是<code>2~sqrt(N)</code>,这是因为因数都是成对出现,一个因子不可能超过sqrt(N).再思考一下,除了2以外所有偶数都不会是质数,因此可将偶数全部排除掉,让我们来修改并测试一下程序:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">def f1(num):</div><div class="line">    count = 1</div><div class="line">    # 优化点1:偶数不做判断</div><div class="line">    for i in range(3, num, 2):</div><div class="line">        b = True</div><div class="line">        sq = int(math.sqrt(i)) + 1</div><div class="line">        # 优化点2:缩小试除范围</div><div class="line">        for j in range(2, sq):</div><div class="line">            if i % j == 0:</div><div class="line">                b = False</div><div class="line">                break</div><div class="line">        if b:</div><div class="line">            count += 1</div><div class="line">    return count</div><div class="line"></div><div class="line">f1(100000)</div><div class="line"># 耗时0.264536051872秒, 个数9592</div></pre></td></tr></table></figure>
<h3 id="境界3"><a href="#境界3" class="headerlink" title="境界3"></a>境界3</h3><p>是否很有趣,通过一步一步的优化从35秒优化到了0.26秒,我们接着进行优化,普通程序员也许在境界2就浅尝辄止了,可是境界永远是用无止境的.</p>
<p>细想一下, 比如判断101是否为质数,<code>sqrt(101)</code>为10, 那我们就要依次用这个数去除以<code>2, 3, 5, 7, 9</code>,大家主要到其实只要除以了3以后就不用除以9了,这样我们就找到了切入点:只要尝试小于sqrt(n) 的<strong>质数</strong>即可. 顺着这个思路,我们会将求得的质数临时保存起来,于是就有了以下方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">def f2(num):</div><div class="line">    arrs = [2]</div><div class="line">    count = 1</div><div class="line">    # 质数数组中的索引</div><div class="line">    stop = 0</div><div class="line">    for i in range(3, num):</div><div class="line">        k = int(math.sqrt(i))</div><div class="line">        while stop &lt; count and arrs[stop] &lt;= k:</div><div class="line">            stop += 1</div><div class="line">        # 整除计数</div><div class="line">        j = 0</div><div class="line">        for k in range(stop):</div><div class="line">            if i % arrs[j] == 0:</div><div class="line">                break</div><div class="line">            j += 1</div><div class="line">        # 判定为质数后加入质数数组</div><div class="line">        if j == stop:</div><div class="line">            arrs.append(i)</div><div class="line">            count += 1</div><div class="line">    return count</div><div class="line"></div><div class="line">f2(100000)</div><div class="line"># 耗时0.199287338917秒, 个数9592</div></pre></td></tr></table></figure>
<h3 id="境界4"><a href="#境界4" class="headerlink" title="境界4"></a>境界4</h3><p>以上都是试除法,现在让我们来尝试以下筛法.让我们先看以下维基百科上十分形象的一张筛法工作原理图:</p>
<p><img src="http://7xp5r4.com1.z0.glb.clouddn.com/16-4-23/38858775.jpg" alt=""></p>
<p>首先2是质数,因此将2的倍数全部去掉;3为质数,理应将6,9,12等去掉,同理我们只要指定一个质数范围,扩大其倍数进行筛选,将不大于N的所有倍数都筛除掉,剩下的就为质数!</p>
<p>我们在运用筛选法的时候,当然还是得用以上总结出来的各种技巧:</p>
<ul>
<li>试除数的范围是为２～sqrt(N),同理质数求合数范围也取这个值</li>
<li>筛法的初始化数组因为要占用字节空间,应尽可能的取小.在此我们用bool型来表示,1代表质数,0代表合数,这样开销会更小</li>
<li>用加法代替乘法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">def f4(num):</div><div class="line">    # 初始化时将偶数全预筛除掉</div><div class="line">    arrs = [0 if _i % 2 == 0 else 1 for _i in range(num + 1)]</div><div class="line">    arrs[2] = 1</div><div class="line">    count = 0</div><div class="line">    for i in range(3, int(math.sqrt(num)), 2):</div><div class="line">        if arrs[i] == 0:</div><div class="line">            continue</div><div class="line">        # j为i的合数,此处用加法代替乘法</div><div class="line">        j = i + i</div><div class="line">        while j &lt;= num:</div><div class="line">            arrs[j] = 0</div><div class="line">            j += i</div><div class="line">    # 计数</div><div class="line">    for k in range(2, num + 1):</div><div class="line">        if arrs[k] == 1:</div><div class="line">            count += 1</div><div class="line">    return count</div><div class="line"></div><div class="line">f4(100000)</div><div class="line"># 耗时0.03232869726秒, 个数9592</div></pre></td></tr></table></figure>
<h3 id="境界5"><a href="#境界5" class="headerlink" title="境界5"></a>境界5</h3><p>…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天偶然在博客上上看到有人提&lt;a href=&quot;http://blog.csdn.net/program_think/article/details/7032600/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;求质素的几种境界&lt;/a&gt;,在此用python进行实现代码,并进行简单的说明.&lt;/p&gt;
&lt;p&gt;我们将要实现函数的功能是输入一个数N,能把小于N的质数个数打印出来,并计算出所耗时间.&lt;/p&gt;
&lt;h3 id=&quot;境界1&quot;&gt;&lt;a href=&quot;#境界1&quot; class=&quot;headerlink&quot; title=&quot;境界1&quot;&gt;&lt;/a&gt;境界1&lt;/h3&gt;&lt;p&gt;我们采用试除法,意思就是将比N小的符合要求的每一个数都除以它,若都无法整除则N为质数,这也是我们能想到的最简单的方法,我们可以从j的范围进行优化一下,很容易想到j的范围可以取&lt;code&gt;2~N/2&lt;/code&gt;.&lt;br&gt;代码如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;def f1(num):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    # 2也是质数,之后程序从3开始判断&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    count = 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for i in range(3, num):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        b = True&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for j in range(2, i/2 + 1):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if i % j == 0:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                b = False&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                break&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if b:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            count += 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return count&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f1(100000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 耗时35.1589805796秒, 个数9592&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://blog.vv13.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>nodejs中exports与module.exports的区别</title>
    <link href="http://blog.vv13.cn/2016/12/25/nodejs%E4%B8%ADexports%E4%B8%8Emodule-exports%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.vv13.cn/2016/12/25/nodejs中exports与module-exports的区别/</id>
    <published>2016-12-25T15:52:57.000Z</published>
    <updated>2017-10-08T13:58:32.077Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs中常常会使用require()加载模块，为了使得文件模块化，将其的变量与方法提供给别的模块使用，就会使用到exports与module.exports，可是如何区分它们呢？ 在此简单的记录一下。</p>
<h3 id="require-的返回值"><a href="#require-的返回值" class="headerlink" title="require()的返回值"></a>require()的返回值</h3><p>require()返回的是module.exports指向的内容而不是exports的，我们将两个变量分别赋予新的内存地址，以此来进行观察：</p>
<p>test.js:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">module.exports = function()&#123;</div><div class="line">    console.log(&apos;I\&apos;m module.exports&apos;)</div><div class="line">&#125;</div><div class="line">exports = function()&#123;</div><div class="line">    console.log(&apos;I\&apos;m exports&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过<code>var a = require(&#39;./test&#39;)()</code>即可看到打印的函数为module.exports，因此可以确定exports是module.exports的一个指针，不清楚指针的具体内容的接着往下看。</p>
<h3 id="exports是module-exports的一个指针"><a href="#exports是module-exports的一个指针" class="headerlink" title="exports是module.exports的一个指针"></a>exports是module.exports的一个指针</h3><p>假设有两个变量，<code>var a={name:&#39;name1}, var b = a;</code>，b指向a的内存区域，如果执行<code>b.name=&#39;name2&#39;</code>，我们通过打印a.name可以看到其值也为name2，这就说明两个变量共同拥有一块内存区域，并且可以共同对区域进行修改。</p>
<p>可如果我们执行<code>a = {}</code>或者<code>b = {}</code>之后，两个变量就各自管理自己的内存空间了，不再有关联，所以在nodejs中两者一共有几种用法：</p>
<ol>
<li>module.exports存在的话，exports或是exports.xxx就会失效，因此此刻两者已经不是管理共同的内存区域。</li>
<li>exports只能通过exports.xxx这种形式进行使用，否则exports={}会指向新的内存区域，不能被require()加载。</li>
<li>exports.xxx与module.exports.xxx等价且可以共同存在。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在nodejs中常常会使用require()加载模块，为了使得文件模块化，将其的变量与方法提供给别的模块使用，就会使用到exports与module.exports，可是如何区分它们呢？ 在此简单的记录一下。&lt;/p&gt;
&lt;h3 id=&quot;require-的返回值&quot;&gt;&lt;a href=&quot;#require-的返回值&quot; class=&quot;headerlink&quot; title=&quot;require()的返回值&quot;&gt;&lt;/a&gt;require()的返回值&lt;/h3&gt;&lt;p&gt;require()返回的是module.exports指向的内容而不是exports的，我们将两个变量分别赋予新的内存地址，以此来进行观察：&lt;/p&gt;
&lt;p&gt;test.js:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;module.exports = function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;I\&amp;apos;m module.exports&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exports = function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;I\&amp;apos;m exports&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://blog.vv13.cn/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>python变量作用域</title>
    <link href="http://blog.vv13.cn/2016/12/25/python%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://blog.vv13.cn/2016/12/25/python变量作用域/</id>
    <published>2016-12-25T15:43:05.000Z</published>
    <updated>2017-10-08T13:58:25.166Z</updated>
    
    <content type="html"><![CDATA[<p>class比作整个屋子，def为卧室，class外面的部分就是小区环境。</p>
<h4 id="首先测试房子-class-与公共设施变量-globals-之间的关系"><a href="#首先测试房子-class-与公共设施变量-globals-之间的关系" class="headerlink" title="首先测试房子(class)与公共设施变量(globals)之间的关系"></a>首先测试房子(class)与公共设施变量(globals)之间的关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># encoding: utf-8</div><div class="line"></div><div class="line">PUBLIC_FACILITIES = u&quot;公共厕所&quot;</div><div class="line"></div><div class="line">class House():</div><div class="line">    print PUBLIC_FACILITIES</div><div class="line">    PUBLIC_FACILITIES = &apos;改造&apos;</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    test = House()</div><div class="line">    print PUBLIC_FACILITIES</div></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">公共厕所</div><div class="line">公共厕所</div><div class="line"></div><div class="line">***Repl Closed***</div></pre></td></tr></table></figure>
<p>房屋的拥有者可以使用小区内的公共设施。由此可知class内部可以访问外部的变量，但不能进行修改，在class中执行改造命令的效果就是新建了一个类局部变量变量，在访问域中覆盖了全局变量的访问域。</p>
<h4 id="测试房子-class-与房间-def-的关系"><a href="#测试房子-class-与房间-def-的关系" class="headerlink" title="测试房子(class)与房间(def)的关系"></a>测试房子(class)与房间(def)的关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># encoding: utf-8</div><div class="line"></div><div class="line">class House():</div><div class="line">    SOFA = u&apos;真皮沙发&apos;</div><div class="line">    def room(self):</div><div class="line">        # print SOFA # 无法直接访问外部变量，取消注释会报错</div><div class="line">        print self.SOFA</div><div class="line">        self.SOFA = &apos;布质沙发&apos;</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    test = House()</div><div class="line">    test.room()</div><div class="line">    print test.SOFA, House.SOFA</div></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">真皮沙发</div><div class="line">布质沙发 真皮沙发</div><div class="line"></div><div class="line">***Repl Closed***</div></pre></td></tr></table></figure>
<p>大家可以理解这样一个现象：无法将客厅的沙发放到卧室(卧室太小)，只能重新订制一个沙发，或是在客厅里去使用。当def方法中不存在与class类相同名称的变量时，def方法体中可以通过self访问到class的类变量， 但是当执行self.SOFA = Something时，新建了一个变量实例变量，并没有修改到class中的类变量， 而变量的搜索时先从局部变量进行查找，如果没有找到再查找全局变量，所有说局部变量优先访问到。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>用python写class时务必区分类变量、实例变量、全局变量，  访问全局变量须申明<code>global variable</code>， 访问类变量要接上类名，如<code>class_name.variable</code>, 还需要注意的时while、for、try语句并不具有独立的命名空间，这与java的规则是不一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;class比作整个屋子，def为卧室，class外面的部分就是小区环境。&lt;/p&gt;
&lt;h4 id=&quot;首先测试房子-class-与公共设施变量-globals-之间的关系&quot;&gt;&lt;a href=&quot;#首先测试房子-class-与公共设施变量-globals-之间的关系&quot; class=&quot;headerlink&quot; title=&quot;首先测试房子(class)与公共设施变量(globals)之间的关系&quot;&gt;&lt;/a&gt;首先测试房子(class)与公共设施变量(globals)之间的关系&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# encoding: utf-8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PUBLIC_FACILITIES = u&amp;quot;公共厕所&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class House():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    print PUBLIC_FACILITIES&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PUBLIC_FACILITIES = &amp;apos;改造&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    test = House()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    print PUBLIC_FACILITIES&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试结果：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;公共厕所&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;公共厕所&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;***Repl Closed***&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://blog.vv13.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>BOM对象的应用</title>
    <link href="http://blog.vv13.cn/2016/12/18/BOM%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://blog.vv13.cn/2016/12/18/BOM对象的应用/</id>
    <published>2016-12-18T12:24:59.000Z</published>
    <updated>2017-10-08T13:58:37.266Z</updated>
    
    <content type="html"><![CDATA[<p>BOM即浏览器对象模型，在js代码里，存在一个代表窗体的全局window对象，通过它可以与浏览器进行一定的交互功能，如：</p>
<ul>
<li>跳转到新的网址：<code>window.location.href = &#39;http://www.google.com&#39;;</code></li>
<li>打开新的窗体：<code>window.open(&#39;http://www.google.com&#39;);</code></li>
<li>刷新页面：<code>window.location.reload();</code></li>
<li>后退：<code>window.history.back();</code></li>
<li>前进：<code>window.history.forward();</code></li>
</ul>
<h4 id="子窗体与父窗体对象的引用"><a href="#子窗体与父窗体对象的引用" class="headerlink" title="子窗体与父窗体对象的引用"></a>子窗体与父窗体对象的引用</h4><p>考虑以下场景：在一个页面中弹出一个子页面，在操作完成后即关闭子页面并刷新父页面。这个场景会在登录页面中十分常见，我们希望当用户登陆完成后刷新父页面，因此需要引用父对象，若在同源页面（浏览器的同源保护策略）即可对子页面进行以下方法的调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function dealOk() &#123;</div><div class="line">  window.opener.location.reload();</div><div class="line">  window.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若是引入第三方的页面，如qq互联接口，则无法直接通过opener获取到父对象进行操作，我们可以通过轮询子窗体状态进行控制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// showPopup会返回window对象，原理是window.open()方法的调用</div><div class="line">const childrenWindow = QC.Login.showPopup(&#123;</div><div class="line">  appId: APPID,</div><div class="line">  redirectURI: REDIRECT_URI,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const timer = setInterval(() =&gt; &#123;</div><div class="line"></div><div class="line">  // 查看窗体是否被关闭</div><div class="line">  if (childrenWindow.closed) &#123;</div><div class="line">    clearInterval(timer); // 清除轮询</div><div class="line">    window.location.reload(); // 刷新页面</div><div class="line">  &#125;</div><div class="line">&#125;,500);</div></pre></td></tr></table></figure>
<h4 id="a标签阻止其跳转"><a href="#a标签阻止其跳转" class="headerlink" title="a标签阻止其跳转"></a>a标签阻止其跳转</h4><p>将a标签的href值设为undefined，就可以阻止其跳转，void函数会执行一个表达式，并只返回undefined，我们也可以通过执行<code>;</code>直接返回undefined：</p>
<ul>
<li><code>&lt;a href=&quot;javascript:void(0);&quot;&gt;点击不会进行跳转&lt;/a&gt;</code></li>
<li><code>&lt;a href=&quot;javascript:;&quot;&gt;点击不会进行跳转&lt;/a&gt;</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BOM即浏览器对象模型，在js代码里，存在一个代表窗体的全局window对象，通过它可以与浏览器进行一定的交互功能，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳转到新的网址：&lt;code&gt;window.location.href = &amp;#39;http://www.google.com&amp;#39;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开新的窗体：&lt;code&gt;window.open(&amp;#39;http://www.google.com&amp;#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;刷新页面：&lt;code&gt;window.location.reload();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后退：&lt;code&gt;window.history.back();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前进：&lt;code&gt;window.history.forward();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;子窗体与父窗体对象的引用&quot;&gt;&lt;a href=&quot;#子窗体与父窗体对象的引用&quot; class=&quot;headerlink&quot; title=&quot;子窗体与父窗体对象的引用&quot;&gt;&lt;/a&gt;子窗体与父窗体对象的引用&lt;/h4&gt;&lt;p&gt;考虑以下场景：在一个页面中弹出一个子页面，在操作完成后即关闭子页面并刷新父页面。这个场景会在登录页面中十分常见，我们希望当用户登陆完成后刷新父页面，因此需要引用父对象，若在同源页面（浏览器的同源保护策略）即可对子页面进行以下方法的调用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function dealOk() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  window.opener.location.reload();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  window.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.vv13.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>git实用命令技巧</title>
    <link href="http://blog.vv13.cn/2016/12/11/git-tricks/"/>
    <id>http://blog.vv13.cn/2016/12/11/git-tricks/</id>
    <published>2016-12-11T15:59:21.000Z</published>
    <updated>2018-02-03T14:47:44.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-pull-–rebase"><a href="#git-pull-–rebase" class="headerlink" title="git pull –rebase"></a>git pull –rebase</h2><p>从分支上拉取最新的代码时，往往会多出一条merge记录，这样有时不是我们所期望的，因为它会让整个提交线图变得难以理解：</p>
<p><img src="/static/imgs/git实用命令技巧-1.png" alt=""></p>
<p>我们期望的分支图也许时这样的：</p>
<p><img src="/static/imgs/git实用命令技巧-2.png" alt=""></p>
<p>只需要将git pull -&gt; git pull –rebase。rebase的好处就在于，它会将当前新的提交记录，全部追加到远程提交信息记录之后:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">合并前：</div><div class="line">        D---E master</div><div class="line">      /</div><div class="line">A---B---C---F origin/master</div><div class="line"></div><div class="line">merge合并：</div><div class="line">    D--------E  </div><div class="line">  /           \</div><div class="line">A---B---C---F---G   master, origin/master</div><div class="line"></div><div class="line">rebase合并：</div><div class="line">A---B---C---F---D---E   master, origin/master</div></pre></td></tr></table></figure></p>
<p>如果遇到冲突，请将冲突解决后执行: <code>git rebase --continue</code>。它也有两面性，至于谁好谁坏，慎用就行了。</p>
<h2 id="git-commit-–amend"><a href="#git-commit-–amend" class="headerlink" title="git commit –amend"></a>git commit –amend</h2><p>有时候我们生成commit信息后有点小的改动，并不希望新添加一个commit，而是将其追加到上一次提交内容中，这条命令就是为了做这件事情，它还可以更改之前的提交信息。</p>
<h2 id="获取远程库的更新"><a href="#获取远程库的更新" class="headerlink" title="获取远程库的更新"></a>获取远程库的更新</h2><p>普通的工作流程一般是先folk整个工程到本地，再添加上游分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add upstream https://xxx.git</div></pre></td></tr></table></figure></p>
<p>这样一来，我们就可以获取远程的更新到当前分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull upstream master</div></pre></td></tr></table></figure></p>
<p>若拉取本地不存在的分支，则可以使用这条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b new_branch upstream/new_branch</div></pre></td></tr></table></figure></p>
<h2 id="推送多个远程库"><a href="#推送多个远程库" class="headerlink" title="推送多个远程库"></a>推送多个远程库</h2><p>用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ vim ~/.git/config</div><div class="line"></div><div class="line">[remote &quot;upstream&quot;]</div><div class="line">        url = git@gitlab.main.com:project.git</div><div class="line">        url = git@github.main.com:project.git</div><div class="line"></div><div class="line">$ git push upstream</div></pre></td></tr></table></figure>
<p>解释：通过编辑config文件，给远程库多添加一个url，那么再执行push操作时，就可以同时push两个库，如上github与gitlab仓库的项目都会更新。</p>
<h2 id="合并多个提交"><a href="#合并多个提交" class="headerlink" title="合并多个提交"></a>合并多个提交</h2><p>有些时候，本地会做多个commit提交，但是在push之前，合并为1个提交会显得更清晰，此时就需要借助<code>git rebase -i HEAD~N</code>了，其中N代表的是最近几次提交，执行后将需要合并的commit从pick改为squash，再重写提交记录即可。</p>
<h2 id="更改提交人"><a href="#更改提交人" class="headerlink" title="更改提交人"></a>更改提交人</h2><p>在有一次和小伙伴协作代码时，由于需要伪造成同一个身份，让代码管理者看commit历史以为是同一个人做的，因此就用到了–author参数，提交的格式为：<code>name&lt;mail&gt;</code>，比如：<code>git commit -m &#39;feat: something&#39; --author=&quot;TJ&lt;mail@gmail.com&gt;&quot;</code>，这是通过git log即可看到作者信息发生了变化。</p>
<h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><p>通常发布版本时，会为当前的时间线打上标签，这样可以快速对不同的版本进行查看。</p>
<h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><ol>
<li>git tag TAG_NAME，列出标签</li>
<li>git tag -a  TAG_NAME -m ‘DESC’，添加附注标签，若不需要信息则去掉-a -m参数</li>
<li>git tag TAG_NAME COMMIT_VERSIONT，给某条提交记录打Tag</li>
</ol>
<h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><ol>
<li>git tag，列出所有标签名称</li>
<li>git show TAG_NAME，显示tag信息</li>
</ol>
<h4 id="推送标签"><a href="#推送标签" class="headerlink" title="推送标签"></a>推送标签</h4><p>默认情况，标签信息是存在本地的，若要推送到服务器，则需使用<code>git push origin --tags</code>。</p>
<h4 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h4><p>Git的Tag只是一个标记，若要切换到标签对应commit，可以通过<code>git show TAG_NAME</code>找到对用的提交信息，再执行相关操作。也可checkout出一个分支与tag对应分支同步：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b [branchname] [tagname]</div><div class="line">Switched to a new branch &apos;branchname&apos;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git-pull-–rebase&quot;&gt;&lt;a href=&quot;#git-pull-–rebase&quot; class=&quot;headerlink&quot; title=&quot;git pull –rebase&quot;&gt;&lt;/a&gt;git pull –rebase&lt;/h2&gt;&lt;p&gt;从分支上拉取最新的代码时，往往会多出一条merge记录，这样有时不是我们所期望的，因为它会让整个提交线图变得难以理解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/imgs/git实用命令技巧-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们期望的分支图也许时这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/static/imgs/git实用命令技巧-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tricks" scheme="http://blog.vv13.cn/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>js变量申明解析</title>
    <link href="http://blog.vv13.cn/2016/12/09/js%E5%8F%98%E9%87%8F%E7%94%B3%E6%98%8E%E8%A7%A3%E6%9E%90/"/>
    <id>http://blog.vv13.cn/2016/12/09/js变量申明解析/</id>
    <published>2016-12-09T09:30:24.000Z</published>
    <updated>2017-10-08T13:58:47.308Z</updated>
    
    <content type="html"><![CDATA[<p>var属性有多种需要注意的特性：</p>
<ol>
<li>无块级作用域</li>
<li>不带申明类型默认为全局变量</li>
<li>变量提升</li>
<li>运行重新申明变量</li>
</ol>
<h4 id="一、块级作用域"><a href="#一、块级作用域" class="headerlink" title="一、块级作用域"></a>一、块级作用域</h4><p>首先，js中申明的var变量或是方法，都没有块级作用域，只有函数作用域，最典型的示例为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for (var i = 0; i &lt; 100; i++)&#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">console.log(i); // 输入100</div></pre></td></tr></table></figure>
<p>若我们使用es6的let与const，就不会出现这种问题。</p>
<h4 id="二、影响全局"><a href="#二、影响全局" class="headerlink" title="二、影响全局"></a>二、影响全局</h4><p>若申明变量不使用变量类型，即使写在另一个函数作用域中申明的变量，也会直接将变量挂载在全局对象上，最容易引发此错误的地方在于使用with的时候，with可以延展一个对象的作用域链，将一个作用域的链拼接到执行上下文的作用域链中，相当于延长了当前作用域链：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const obj = &#123;</div><div class="line">  a: &apos;a&apos;,</div><div class="line">  b: &apos;b&apos;,</div><div class="line">&#125;;</div><div class="line">with (obj) &#123;</div><div class="line">  console.log(a, b); // a b</div><div class="line">  b = 3;</div><div class="line">  c = 1;</div><div class="line">&#125;</div><div class="line">console.log(obj.b, c); // 3 1</div></pre></td></tr></table></figure>
<p>在with作用域中可以直接访问到b的值， 但是我们假如书写错误或是记漏变量名，如对c进行操作，则会创建一个全局变量c，这样不但会污染全局空间，也会对系统造成额外的开销，让我们来测试一段使用with语句进行访问的测试代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">const testobj = &#123; foo: &apos;bar&apos; &#125;;</div><div class="line">let value;</div><div class="line">let starttime;</div><div class="line">let endtime;</div><div class="line">const times = 1000000;</div><div class="line"></div><div class="line">starttime = new Date().getTime();</div><div class="line">for (let n = 0; n &lt; times; n++) &#123;</div><div class="line">  value = testobj.foo;</div><div class="line">&#125;</div><div class="line">endtime = new Date().getTime();</div><div class="line">console.log(`正常赋值操作:$&#123;endtime - starttime&#125;ms`);</div><div class="line"></div><div class="line">starttime = new Date().getTime();</div><div class="line">with (testobj) &#123;</div><div class="line">  for (let n = 0; n &lt; times; n++) &#123;</div><div class="line">    value = foo;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">endtime = new Date().getTime();</div><div class="line">console.log(`with赋值操作:$&#123;endtime - starttime&#125;ms`);</div><div class="line"></div><div class="line">*****输出结果</div><div class="line">正常赋值操作:25ms</div><div class="line">with赋值操作:415ms</div></pre></td></tr></table></figure>
<p>造成的原因是因为,在with下进行访问变量默认都是从一个对象中进行访问, 这样比直接访问多一个层级,自然速度就慢下来了，而且with语句不利于编译器进行静态分析，以此我们在代码中不要使用with。</p>
<h4 id="三、变量提升"><a href="#三、变量提升" class="headerlink" title="三、变量提升"></a>三、变量提升</h4><p>大家肯定熟悉函数提升，可将函数定义放在调用代码之后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a(); // haha</div><div class="line">function a() &#123;</div><div class="line">    console.log(&apos;haha&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数之所以会提升，还是因为编译器做静态分析时，会优先找到函数申明，再进行语法分词与解释器识别。</p>
<p>在js脚本内，可以在变量与申明式方法定义之前访问到其变量，值为undefined，这样的概念就叫做变量提升:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.log(a); // undefined</div><div class="line">var a = &apos;1&apos;;</div></pre></td></tr></table></figure>
<p>其实，这种提升只是为了设计和实现上更容易，并没什么优点，只不过新手应注意到这个细节。</p>
<p>只有var变量存在变量提示，而let与const都不会存在变量提升，并且，它们会带来一个特性：<code>暂时性死区</code>。</p>
<blockquote>
<p>暂时性死区：有let存在的区域，它所申明的变量就会绑定这个区域，不再受外部作用于的影响,在块级作用域中let变量声明之前的区域都称谓它的死区。</p>
</blockquote>
<p>这里有一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 1</div><div class="line">if(true)&#123;</div><div class="line">    console.log(a) //ReferenceError</div><div class="line">    let a = 2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>变量提升还会造成一种问题，那就是内层变量会覆盖外层变量的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var tmp = new Date();</div><div class="line"></div><div class="line">function f() &#123;</div><div class="line">  console.log(tmp);</div><div class="line">  if (false) &#123;</div><div class="line">    var tmp = &quot;hello world&quot;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f(); // undefined</div></pre></td></tr></table></figure>
<h4 id="四、全局对象属性"><a href="#四、全局对象属性" class="headerlink" title="四、全局对象属性"></a>四、全局对象属性</h4><p>全局对象是最顶层的属性，在浏览器中指window对象，在node中指代global对象。在以往的设计中，未申明的对象自动成为全局window的属性，这样就没法再编译时报出变量未申明的错误，而es6为了改变这一点，为了保持兼容性，var和function命令声明的全局变量依旧是全局变量；另一方面，let、const、class明亮声明的全局变量，不属于全局对象的属性。也就是说，全局变量将逐步与全局对象的属性脱钩。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(function()&#123;</div><div class="line">  a = 3</div><div class="line">&#125;)()</div><div class="line">var b = 2</div><div class="line">console.log(window.a, window.b) //打印3,2，全局变量自动成为全局对象的属性</div><div class="line"></div><div class="line">let c = 123</div><div class="line">const d = 456</div><div class="line">console.log(window.c, window.d) //undefined*2, es6的属性将与全局对象脱钩</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在理解传统变量的基础下，应该多使用let、const等新的属性来申明变量，这是js语言的一种进化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;var属性有多种需要注意的特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无块级作用域&lt;/li&gt;
&lt;li&gt;不带申明类型默认为全局变量&lt;/li&gt;
&lt;li&gt;变量提升&lt;/li&gt;
&lt;li&gt;运行重新申明变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;一、块级作用域&quot;&gt;&lt;a href=&quot;#一、块级作用域&quot; class=&quot;headerlink&quot; title=&quot;一、块级作用域&quot;&gt;&lt;/a&gt;一、块级作用域&lt;/h4&gt;&lt;p&gt;首先，js中申明的var变量或是方法，都没有块级作用域，只有函数作用域，最典型的示例为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;for (var i = 0; i &amp;lt; 100; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  // ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(i); // 输入100&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.vv13.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js代理函数技巧</title>
    <link href="http://blog.vv13.cn/2016/12/09/js%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E6%8A%80%E5%B7%A7/"/>
    <id>http://blog.vv13.cn/2016/12/09/js代理函数技巧/</id>
    <published>2016-12-08T17:06:48.000Z</published>
    <updated>2017-10-08T13:58:51.467Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>有时候我们总想改造某些函数，保留它原有的功能与参数，追加新的操作在里面，若是自己写的函数，则直接改写函数即可，但假若是系统给定的函数与未知的参数，那么该怎么办呢？</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>假设下面有一个自定义函数splice, 它主要的功能是删除原数组指定索引元素，再将其返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function splice(arrs, start, length) &#123;</div><div class="line">  arrs.splice(start, length);</div><div class="line">  return arrs;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const arrs = [1,2,3];</div><div class="line">splice(arrs, 1, 1); // 返回为：[1,3]</div></pre></td></tr></table></figure></p>
<p>如果我们需要扩展splice，比如打印被删除的元素信息，则只需要进行如下更改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function splice(arrs, start, length) &#123;</div><div class="line">  console.log(`索引位置：$&#123;start&#125;, 长度$&#123;length&#125;，元素为：$&#123;arrs.splice(start, length)&#125;`);</div><div class="line">  return arrs;</div><div class="line">&#125;</div><div class="line">const arrs = [1,2,3];</div><div class="line">splice(arrs, 1, 2); // 返回为: [1]</div><div class="line">// 索引位置：1, 长度2，元素为：2,3</div></pre></td></tr></table></figure>
<p>上述方法并不太理想，因为这样一来每次扩展方法都会修改原方法，我们不希望原方法进行修改。splice是es5内置的数组方法，就算想要修改原方法也不行，那么应该怎么做呢？这时候就应该使用代理了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const arrs = [1,2,3];</div><div class="line">const proxy = (...args) =&gt; &#123;</div><div class="line">  const cutArrs = arrs.splice.apply(arrs, args);</div><div class="line">  console.log(`索引位置：$&#123;args[0]&#125;, 长度$&#123;args[1]&#125;，元素为：$&#123;cutArrs&#125;`);</div><div class="line">&#125;</div><div class="line">proxy(1, 2); // 索引位置：1, 长度2，元素为：2,3</div><div class="line">console.log(arrs); // [1]</div></pre></td></tr></table></figure>
<h4 id="代理做了什么"><a href="#代理做了什么" class="headerlink" title="代理做了什么"></a>代理做了什么</h4><p>通过proxy(…)调用，可以保持原有函数的传参模式，在不修改函数的情况，对函数进行了功能扩展，意义在于我们给原有的函数加了一些功能，可使用传入的参数进行进一步操作，而不是修改函数体本身。</p>
<p>原理如下</p>
<ol>
<li>将参数通过…args传入，它会变为一个args数组</li>
<li>通过apply进行调用原函数，需注意的是，splice属于数组的作用域而不是当前的执行环境，因此apply的第一个参数不应该填this，直接填数组本身</li>
<li>在proxy方法体中进行进一步操作，构造完毕</li>
<li>按原顺序传入参数，进行执行。</li>
</ol>
<h4 id="实际用例"><a href="#实际用例" class="headerlink" title="实际用例"></a>实际用例</h4><p>在react项目中，我需要使用到redux-form传入的reset的操作，以此来清除表单，但是清除后我还需要改变state将表单收起，这样一个需求建立在一个这样的代码中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// reset方法通过reduxForm包装来注入：</div><div class="line">export default reduxForm(&#123;</div><div class="line">  form: &apos;xxx&apos;,</div><div class="line">&#125;)(xxx);</div><div class="line"></div><div class="line">// 清除按钮</div><div class="line">&lt;button</div><div class="line">  type=&quot;button&quot;</div><div class="line">  className=&#123;style[&apos;invoice-btn&apos;]&#125;</div><div class="line">  onClick=&#123;this.props.reset&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>我们并不清除reset参数具体的传入顺序与值，仅仅是想追加一个操作，这在react中十分常见，因为很多方法都是从父组件传递进来的，我们一般直接绑定到指定子组件中即可，如果我们想追加操作，可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;button</div><div class="line">  type=&quot;button&quot;</div><div class="line">  className=&#123;style[&apos;xxx&apos;]&#125;</div><div class="line">  onClick=&#123;(...args) =&gt; &#123;</div><div class="line">    reset.apply(this, args);</div><div class="line">    this.props.hideit();</div><div class="line">  &#125;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>谢谢阅读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h4&gt;&lt;p&gt;有时候我们总想改造某些函数，保留它原有的功能与参数，追加新的操作在里面，若是自己写的函数，则直接改写函数即可，但假若是系统给定的函数与未知的参数，那么该怎么办呢？&lt;/p&gt;
&lt;h4 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h4&gt;&lt;p&gt;假设下面有一个自定义函数splice, 它主要的功能是删除原数组指定索引元素，再将其返回：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function splice(arrs, start, length) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  arrs.splice(start, length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return arrs;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;const arrs = [1,2,3];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;splice(arrs, 1, 1); // 返回为：[1,3]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果我们需要扩展splice，比如打印被删除的元素信息，则只需要进行如下更改：&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://blog.vv13.cn/tags/js/"/>
    
  </entry>
  
</feed>
